<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Jakarta EE: Multitenancy with JPA on WildFly, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GkyaBbExvA0/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jakarta ee" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java beans" scheme="searchisko:content:tags" /><category term="multi-tenancy" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="persistence api" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>rhsilva</name></author><id>searchisko:content:id:jbossorg_blog-jakarta_ee_multitenancy_with_jpa_on_wildfly_part_2</id><updated>2020-11-12T08:00:17Z</updated><published>2020-11-12T08:00:17Z</published><content type="html">&lt;p&gt;This is the second half of a two-part article about multitenancy with the Jakarta Persistence API (JPA) on WildFly. In &lt;a href="https://developers.redhat.com/blog/2020/06/15/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-1/"&gt;Part 1&lt;/a&gt;, I showed you how to implement multitenancy using a database. In Part 2, I&amp;#8217;ll show you how to implement multitenancy using a schema and the &lt;a target="_blank" rel="nofollow" href="https://projects.eclipse.org/projects/ee4j.jpa"&gt;Jakarta Persistence API&lt;/a&gt; (JPA) on &lt;a target="_blank" rel="nofollow" href="https://wildfly.org/"&gt;WildFly&lt;/a&gt;. You&amp;#8217;ll learn how to implement JPA&amp;#8217;s &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; and &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interfaces, and how to use JPA’s &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the required classes based on these interfaces.&lt;/p&gt; &lt;h2&gt;Implementation code&lt;/h2&gt; &lt;p&gt;The first part of this article offers a conceptual overview of multitenancy with JPA on WildFly and an example of multitenancy using a database. This second part shifts the focus to multitenancy using a schema and JPA. In this case, I assume that WildFly manages the data source and connection pool and that EJB (&lt;a target="_blank" rel="nofollow" href="https://jakarta.ee/specifications/enterprise-beans/"&gt;Jakarta Enterprise Beans&lt;/a&gt;) handles the container-managed transactions.&lt;/p&gt; &lt;h3&gt;Two interfaces for multitenancy&lt;/h3&gt; &lt;p&gt;As I explained in my previous article, two interfaces are crucial for implementing multitenancy in JPA and Hibernate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &lt;strong&gt;MultiTenantConnectionProvider&lt;/strong&gt; interface is responsible for connecting tenants to their respective databases and services. We will use this interface and a tenant identifier to switch between databases for different tenants.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;CurrentTenantIdentifierResolver&lt;/strong&gt; is responsible for identifying the tenant. We will use this interface to define what is considered a tenant (more about this later) and to provide the correct tenant identifier to &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Next, we&amp;#8217;ll look at the three classes that implement these interfaces.&lt;/p&gt; &lt;h3&gt;SchemaMultiTenantProvider&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; is an implementation of the &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interface. This class contains logic to switch to the schema that matches the given tenant identifier.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; class also implements the &lt;code&gt;ServiceRegistryAwareService&lt;/code&gt;, which allows us to inject a service during the configuration phase. Here’s the code for the &lt;code&gt;SchemaMultiTenantProvider&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt;public class SchemaMultiTenantProvider implements MultiTenantConnectionProvider, ServiceRegistryAwareService { private static final long serialVersionUID = 1L; private static final String TENANT_SUPPORTED = "SCHEMA"; private DataSource dataSource; private String typeTenancy ; @Override public boolean supportsAggressiveRelease() { return false; } @Override public void injectServices(ServiceRegistryImplementor serviceRegistry) { typeTenancy = (String) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.multiTenancy"); dataSource = (DataSource) ((ConfigurationService)serviceRegistry .getService(ConfigurationService.class)) .getSettings().get("hibernate.connection.datasource"); } @SuppressWarnings("rawtypes") @Override public boolean isUnwrappableAs(Class clazz) { return false; } @Override public &amp;#60;T&amp;#62; T unwrap(Class&amp;#60;T&amp;#62; clazz) { return null; } @Override public Connection getAnyConnection() throws SQLException { final Connection connection = dataSource.getConnection(); resetConnection(connection);// To make sure the connection start using schema/database default. return connection; } @Override public Connection getConnection(String tenantIdentifier) throws SQLException { //Just use the multitenancy if the hibernate.multiTenancy == SCHEMA if(TENANT_SUPPORTED.equals(typeTenancy)) { try { final Connection connection = getAnyConnection(); connection.createStatement().execute("SET SCHEMA '" + tenantIdentifier + "'"); return connection; } catch (final SQLException e) { throw new HibernateException("Error trying to alter schema [" + tenantIdentifier + "]", e); } } return getAnyConnection(); } @Override public void releaseAnyConnection(Connection connection) throws SQLException { //As the Wildfly/JBoss has the Container-Managed Container change the SCHEMA in the end can be dangerous (SET SCHEMA 'public'). //Thus it just closes the connection. connection.close(); } private void resetConnection(Connection connection){ if(TENANT_SUPPORTED.equals(typeTenancy)) { try { connection.createStatement().execute("SET SCHEMA 'public'"); } catch (final SQLException e) { throw new HibernateException("Error trying to alter schema [public]", e); } } } @Override public void releaseConnection(String tenantIdentifier, Connection connection) throws SQLException { releaseAnyConnection(connection); } } &lt;/pre&gt; &lt;p&gt;As you can see, we call the &lt;code&gt;injectServices&lt;/code&gt; method to populate the &lt;code&gt;datasource&lt;/code&gt; and &lt;code&gt;typeTenancy&lt;/code&gt; attributes. We use the &lt;code&gt;datasource&lt;/code&gt; attribute to get a connection from the data source, and we use the &lt;code&gt;typeTenancy&lt;/code&gt; attribute to find out if the class supports the &lt;code&gt;multiTenancy&lt;/code&gt; type. We call the &lt;code&gt;getConnection&lt;/code&gt; method to get a data source connection. This method uses the tenant identifier to locate and switch to the correct schema.&lt;/p&gt; &lt;h3&gt;MultiTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;MultiTenantResolver&lt;/code&gt; is a simple, abstract class that implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class aims to provide a &lt;code&gt;setTenantIdentifier&lt;/code&gt; method to all &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; implementations:&lt;/p&gt; &lt;pre&gt;public abstract class MultiTenantResolver implements CurrentTenantIdentifierResolver { protected String tenantIdentifier; public void setTenantIdentifier(String tenantIdentifier) { this.tenantIdentifier = tenantIdentifier; } } &lt;/pre&gt; &lt;p&gt;We only use this class to provide the &lt;code&gt;setTenantIdentifier&lt;/code&gt; method.&lt;/p&gt; &lt;h3&gt;SchemaTenantResolver&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SchemaTenantResolver&lt;/code&gt; also implements the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; interface. This class is the concrete class of &lt;code&gt;MultiTenantResolver&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;public class SchemaTenantResolver extends MuiltiTenantResolver { private Map&amp;#60;String, String&amp;#62; userDatasourceMap; public SchemaTenantResolver(){ userDatasourceMap = new HashMap(); userDatasourceMap.put("default", "public"); userDatasourceMap.put("username1", "usernameone"); userDatasourceMap.put("username2", "usernametwo"); } @Override public String resolveCurrentTenantIdentifier() { if(this.tenantIdentifier != null &amp;#38;&amp;#38; userDatasourceMap.containsKey(this.tenantIdentifier)){ return userDatasourceMap.get(this.tenantIdentifier); } return userDatasourceMap.get("default"); } @Override public boolean validateExistingCurrentSessions() { return false; } } &lt;/pre&gt; &lt;p&gt;Notice that &lt;code&gt;SchemaTenantResolver&lt;/code&gt; uses a &lt;code&gt;Map&lt;/code&gt; to define the correct schema for a given tenant. The tenant, in this case, is mapped by the user.&lt;/p&gt; &lt;h2&gt;Configure and define the tenant&lt;/h2&gt; &lt;p&gt;Now, we need to use JPA&amp;#8217;s &lt;code&gt;persistence.xml&lt;/code&gt; file to configure the tenant:&lt;/p&gt; &lt;pre&gt;&amp;#60;persistence&amp;#62; &amp;#60;persistence-unit name="jakartaee8"&amp;#62; &amp;#60;jta-data-source&amp;#62;jdbc/MyDataSource&amp;#60;/jta-data-source&amp;#62; &amp;#60;properties&amp;#62; &amp;#60;property name="javax.persistence.schema-generation.database.action" value="none" /&amp;#62; &amp;#60;property name="hibernate.dialect" value="org.hibernate.dialect.PostgresPlusDialect"/&amp;#62; &lt;strong&gt;&amp;#60;property name="hibernate.multiTenancy" value="SCHEMA"/&amp;#62;&lt;/strong&gt; &lt;strong&gt;&amp;#60;property name="hibernate.tenant_identifier_resolver" value="net.rhuanrocha.dao.multitenancy.SchemaTenantResolver"/&amp;#62;&lt;/strong&gt; &lt;strong&gt; &amp;#60;property name="hibernate.multi_tenant_connection_provider" value="net.rhuanrocha.dao.multitenancy.SchemaMultiTenantProvider"/&amp;#62;&lt;/strong&gt; &amp;#60;/properties&amp;#62; &amp;#60;/persistence-unit&amp;#62; &amp;#60;/persistence&amp;#62; &lt;/pre&gt; &lt;p&gt;We define the tenant in the JPA and Hibernate &lt;code&gt;EntityManagerFactory&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;@PersistenceUnit protected EntityManagerFactory emf; protected EntityManager getEntityManager(String multitenancyIdentifier){ final MuiltiTenantResolver tenantResolver = (&lt;strong&gt;MuiltiTenantResolver&lt;/strong&gt;) ((SessionFactoryImplementor) emf).getCurrentTenantIdentifierResolver(); &lt;strong&gt; tenantResolver.setTenantIdentifier(multitenancyIdentifier);&lt;/strong&gt; return emf.createEntityManager(); } &lt;/pre&gt; &lt;p&gt;Note that we call the &lt;code&gt;setTenantIdentifier&lt;/code&gt; before creating a new instance of &lt;code&gt;EntityManager&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article presented a simple example of multitenancy using a schema in a database. There are many ways to use a database for multitenancy. My point has been to show you how to implement the &lt;code&gt;CurrentTenantIdentifierResolver&lt;/code&gt; and &lt;code&gt;MultiTenantConnectionProvider&lt;/code&gt; interfaces. I&amp;#8217;ve also shown you how to use JPA&amp;#8217;s &lt;code&gt;persistence.xml&lt;/code&gt; to configure the required classes based on the two interfaces.&lt;/p&gt; &lt;p&gt;Keep in mind that for this example, I have assumed that WildFly manages the data source and connection pool and that we&amp;#8217;re using enterprise beans for the container-managed transactions. If you want to go deeper with this example, you can &lt;a target="_blank" rel="nofollow" href="https://github.com/rhuan080/multitenancyJpaJakartaEE"&gt;find the complete application code and further instructions&lt;/a&gt; on my GitHub repository.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#38;linkname=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F12%2Fjakarta-ee-multitenancy-with-jpa-on-wildfly-part-2%2F&amp;#038;title=Jakarta%20EE%3A%20Multitenancy%20with%20JPA%20on%20WildFly%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/" data-a2a-title="Jakarta EE: Multitenancy with JPA on WildFly, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/"&gt;Jakarta EE: Multitenancy with JPA on WildFly, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GkyaBbExvA0" height="1" width="1" alt=""/&gt;</content><summary>This is the second half of a two-part article about multitenancy with the Jakarta Persistence API (JPA) on WildFly. In Part 1, I showed you how to implement multitenancy using a database. In Part 2, I’ll show you how to implement multitenancy using a schema and the Jakarta Persistence API (JPA) on WildFly. You’ll learn how to implement JPA’s CurrentTenantIdentifierResolver and MultiTenantConnectio...</summary><dc:creator>rhsilva</dc:creator><dc:date>2020-11-12T08:00:17Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/12/jakarta-ee-multitenancy-with-jpa-on-wildfly-part-2/</feedburner:origLink></entry><entry><title>Open Source Monetization Ecosystem Review</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/65m6lxYC718/open-source-monetization-ecosystem.html" /><category term="Blockchain" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_ofbizian" scheme="searchisko:content:tags" /><category term="monetization" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="sustainability" scheme="searchisko:content:tags" /><author><name>Bilgin Ibryam</name></author><id>searchisko:content:id:jbossorg_blog-open_source_monetization_ecosystem_review</id><updated>2020-11-11T11:34:52Z</updated><published>2020-11-11T11:34:00Z</published><content type="html">Open source is a distributed innovation model that lacks distributed funding. It allows individuals with a common passion to collaborate and produce value but not capture it. It is a production factory, without a sales counter. That is why many open source contributors are not getting a fair return. That is why many companies capture value from open source but without paying back. That is why many independent open source builders use alternative means to fund themselves. That is why open source is not a business model. It is a production model, monetization not-included. But there is hope, there is change. &lt;br /&gt;&lt;p&gt;&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-daPhx9K02tM/X6vEUDEvEjI/AAAAAAAAO7o/nKQBPHHHwPAh8-RU9zCwBFtTsPKQv15yQCLcBGAsYHQ/s1682/monetization_for_individuals.png" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="710" data-original-width="1682" height="169" src="https://1.bp.blogspot.com/-daPhx9K02tM/X6vEUDEvEjI/AAAAAAAAO7o/nKQBPHHHwPAh8-RU9zCwBFtTsPKQv15yQCLcBGAsYHQ/w400-h169/monetization_for_individuals.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;i&gt;Open source monetization journey for individuals&lt;/i&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Open source is an innovation model and it is going to innovate its monetization too. There are new &lt;a href="https://www.oss.fund/" target="_blank"&gt;ways&lt;/a&gt; for fans to support the creative work of open source builders. There are ways to create online courses and monetize knowledge. There are new ways to create digital goods with accompanying services and sell them online for a fiver. Ways to start newsletters and make money from your audience. Ways to measure an open source contributor's merit, incentivize it, and trade it. Decentralized protocols for staking tokens and support open source through interest rather than donations.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-4BnDlbgBPt0/X6vH5nTprzI/AAAAAAAAO70/TEUF4NEezbMutxYmt2HcTmkm4xF0r7ukACLcBGAsYHQ/s2508/Bilgin%2BIbryam.jpg" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="1254" data-original-width="2508" height="200" src="https://1.bp.blogspot.com/-4BnDlbgBPt0/X6vH5nTprzI/AAAAAAAAO70/TEUF4NEezbMutxYmt2HcTmkm4xF0r7ukACLcBGAsYHQ/w400-h200/Bilgin%2BIbryam.jpg" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;i&gt;99 Ways to Make Money with Open Source as an Individual&lt;/i&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There is an open source monetization revolution happening right now and I'll explore the whole spectrum of open source monetization projects at &lt;a href="https://2020.opencoresummit.com/" target="_blank"&gt;Open Core Summit Digital&lt;/a&gt;. Join me on December 16th-18th where I will talk about "&lt;i&gt;99 Ways to Make Money with Open Source as an Individual&lt;/i&gt;".&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/65m6lxYC718" height="1" width="1" alt=""/&gt;</content><summary>Open source is a distributed innovation model that lacks distributed funding. It allows individuals with a common passion to collaborate and produce value but not capture it. It is a production factory, without a sales counter. That is why many open source contributors are not getting a fair return. That is why many companies capture value from open source but without paying back. That is why many...</summary><dc:creator>Bilgin Ibryam</dc:creator><dc:date>2020-11-11T11:34:00Z</dc:date><feedburner:origLink>http://www.ofbizian.com/2020/11/open-source-monetization-ecosystem.html</feedburner:origLink></entry><entry><title>Leading the future of Java with the Red Hat build of Quarkus 1.7</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JDRae5GgG6E/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="kubernetes-native" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>jebeck</name></author><id>searchisko:content:id:jbossorg_blog-leading_the_future_of_java_with_the_red_hat_build_of_quarkus_1_7</id><updated>2020-11-11T03:55:40Z</updated><published>2020-11-11T03:55:40Z</published><content type="html">&lt;p&gt;&lt;img class="wp-image-814927 size-medium alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default-300x46.png" alt="" width="300" height="46" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default-300x46.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/quarkus_logo_horizontal_rgb_600px_default.png 601w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;The latest supported version of the &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Red Hat build of Quarkus&lt;/a&gt; continues to drive the future of &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java development&lt;/a&gt; for &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-native and &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/cloud-native-apps/what-is-serverless"&gt;serverless&lt;/a&gt; applications. This article introduces the technologies making it easier than ever to create fast, lightweight Java applications for &lt;a href="https://developers.redhat.com/topics/containers"&gt;container-based&lt;/a&gt; and serverless environments using the Red Hat build of Quarkus 1.7.&lt;/p&gt; &lt;h2&gt;Native code compilation&lt;/h2&gt; &lt;p&gt;Developers using the Red Hat build of Quarkus can now choose between deploying natively compiled code or JVM-based code depending on an application&amp;#8217;s needs. Natively compiled Quarkus applications are extremely fast and memory-efficient, making Quarkus a great choice for serverless and high-density cloud deployments. Quarkus 1.7&amp;#8217;s support for native executables is provided by &lt;a href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;Mandrel&lt;/a&gt;, a downstream distribution of GraalVM based on OpenJDK 11.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/key-findings-idc-red-hat-quarkus-lab-validation"&gt;this summary&lt;/a&gt; of the recently published &lt;i&gt;Quarkus IDC Lab Validation Report&lt;/i&gt; for more about how Quarkus performs compared to traditional Java frameworks.&lt;/p&gt; &lt;h2&gt;Additional features and capabilities&lt;/h2&gt; &lt;p&gt;The Red Hat build of Quarkus 1.7 includes these additional features and capabilities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/courses/openshift/playground-openshift"&gt;Red Hat OpenShift 4.5&lt;/a&gt; certification for &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/4966181"&gt;supported configurations&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Support for &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Red Hat OpenShift Serverless&lt;/a&gt; (&lt;a target="_blank" rel="nofollow" href="https://github.com/knative/serving"&gt;Knative Serving&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Integration with Red Hat Data Grid 8 (&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Infinispan client&lt;/a&gt;) and Red Hat&amp;#8217;s single sign-on technology (&lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/security-keycloak-authorization"&gt;Keycloak&lt;/a&gt;).&lt;/li&gt; &lt;li&gt;Spring compatibility enhancements for &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/spring-cache"&gt;cache&lt;/a&gt;, config, and scheduled.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt; extension for remote procedure calls.&lt;/li&gt; &lt;li&gt;Support for the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/getting-started-reactive#mutiny"&gt;Mutiny&lt;/a&gt; reactive framework.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;The gRPC extension and remote development&lt;/h3&gt; &lt;p&gt;One of the founding principles of Quarkus is to &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/vision/developer-joy"&gt;bring Java developers joy&lt;/a&gt;. Quarkus delivers on this promise by providing developers with tools and capabilities such as live coding, unified configuration, IDE plug-ins, and more. The Red Hat build of Quarkus also supports a &lt;a target="_blank" rel="nofollow" href="https://code.quarkus.io/"&gt;vast ecosystem of extensions&lt;/a&gt; for easily configuring, integrating, and compiling other frameworks and technologies. One such technology is the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/blog/quarkus-grpc/"&gt;gRPC extension&lt;/a&gt;, which lets developers expose and consume remote procedure calls with Transport Layer Security (TLS) encryption and authentication.&lt;/p&gt; &lt;p&gt;Quarkus also provides a &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/maven-tooling#remote-development-mode"&gt;remote development mode&lt;/a&gt; that lets developers run Quarkus in container environments such as OpenShift. Changes to local files are immediately visible when in remote development mode.&lt;/p&gt; &lt;h3&gt;OpenShift and serverless deployments&lt;/h3&gt; &lt;p&gt;Its small memory footprint and fast boot times make Quarkus an ideal runtime for serverless applications. The Red Hat build of Quarkus is optimized for use with containers and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;. As a result, developers can easily deploy Kubernetes-native and serverless applications without worrying about the underlying infrastructure. The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift"&gt;Quarkus OpenShift extension&lt;/a&gt; lets you use Apache Maven in a single build command or the Source-to-Image (S2I) method to deploy Quarkus applications and Kubernetes resources on OpenShift. The Quarkus OpenShift extension also supports deploying Quarkus applications to OpenShift with Knative Serving installed. Knative Serving scales application services up and down depending on the load size.&lt;/p&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/"&gt;Red Hat Build of Quarkus 1.7&lt;/a&gt; documentation for more about &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/html/deploying_quarkus_applications_on_red_hat_openshift_container_platform/index"&gt;deploying Quarkus applications on OpenShift&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_build_of_quarkus/1.7/html/deploying_a_red_hat_build_of_quarkus_application_as_a_openshift_serverless_service/index"&gt;as OpenShift Serverless services&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;More tools for developers&lt;/h3&gt; &lt;p&gt;In addition to the optimizations and integrations with OpenShift, the Red Hat build of Quarkus is also tightly integrated with Red Hat Data Grid 8 and Red Hat&amp;#8217;s single sign-on technology.&lt;/p&gt; &lt;p&gt;Red Hat Data Grid 8 is an in-memory, distributed, NoSQL datastore solution based on Infinispan. Using the Quarkus &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Infinispan extension&lt;/a&gt;, developers can connect to a Data Grid server running outside of application processes and create native executables. See &lt;a href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/a&gt; for more about this technology.&lt;/p&gt; &lt;p&gt;Red Hat&amp;#8217;s single sign-on technology provides support with securing web applications. The &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/security"&gt;Keycloak extension&lt;/a&gt; provides the architecture, authentication and authorization mechanisms, and other tools for creating production-quality security for your applications. See the DevNation Tech Talk, &lt;a href="https://developers.redhat.com/videos/youtube/JvPBWPDQ940"&gt;Easily secure your cloud-native microservices with Keycloak&lt;/a&gt; to learn more about securing Quarkus microservices with single sign-on technology from Red Hat.&lt;/p&gt; &lt;h2&gt;What’s next for Quarkus?&lt;/h2&gt; &lt;p&gt;The Quarkus community is rapidly innovating and releasing updates. We will continue to mirror this innovation to support Java developers creating cloud-native applications with Quarkus. Future releases of the Red Hat build of Quarkus will add new features and capabilities to improve developer productivity. We will also continue to find ways to support developers in creating serverless applications beyond OpenShift.&lt;/p&gt; &lt;h2&gt;Get started with the Red Hat build of Quarkus 1.7&lt;/h2&gt; &lt;p&gt;For developers interested in getting started, the &lt;a target="_blank" rel="nofollow" href="http://code.quarkus.redhat.com/"&gt;Quarkus initializer&lt;/a&gt; is a powerful way to bootstrap your Quarkus application and discover its extensions ecosystem.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#38;linkname=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fleading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7%2F&amp;#038;title=Leading%20the%20future%20of%20Java%20with%20the%20Red%20Hat%20build%20of%20Quarkus%201.7" data-a2a-url="https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/" data-a2a-title="Leading the future of Java with the Red Hat build of Quarkus 1.7"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/"&gt;Leading the future of Java with the Red Hat build of Quarkus 1.7&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JDRae5GgG6E" height="1" width="1" alt=""/&gt;</content><summary>The latest supported version of the Red Hat build of Quarkus continues to drive the future of Java development for Kubernetes-native and serverless applications. This article introduces the technologies making it easier than ever to create fast, lightweight Java applications for container-based and serverless environments using the Red Hat build of Quarkus 1.7. Native code compilation Developers u...</summary><dc:creator>jebeck</dc:creator><dc:date>2020-11-11T03:55:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/10/leading-the-future-of-java-with-the-red-hat-build-of-quarkus-1-7/</feedburner:origLink></entry><entry><title>vscode-xml 1.14.0: A more customizable XML extension for VS Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DpVBUR-CWPY/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="schema errors" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="Spring XML" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="vscode-xml" scheme="searchisko:content:tags" /><category term="XML symbols outline" scheme="searchisko:content:tags" /><author><name>David Thompson</name></author><id>searchisko:content:id:jbossorg_blog-vscode_xml_1_14_0_a_more_customizable_xml_extension_for_vs_code</id><updated>2020-11-10T08:00:39Z</updated><published>2020-11-10T08:00:39Z</published><content type="html">&lt;p&gt;Red Hat&amp;#8217;s &lt;a href="https://developers.redhat.com/products/vscode-extensions/overview"&gt;XML extension for Visual Studio Code&lt;/a&gt; (VS Code) has improved significantly since the last release. This article is an overview of the most notable updates in the &lt;code&gt;vscode-xml&lt;/code&gt; extension 0.14.0 release. Improvements include embedded settings documentation, customizable document outlines, links for seamless XML catalog navigation, and error aggregation for schema validation.&lt;/p&gt; &lt;h2&gt;Embedded settings documentation&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve improved the documentation for developers setting up XML document validation. We also added detailed, embedded descriptions for all of the available settings. The embedded documentation is the same documentation that is available from the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-xml/blob/master/docs/"&gt;GitHub repository for vscode-xml&lt;/a&gt;. You can now access the documentation directly within VS Code without requiring an internet connection.&lt;/p&gt; &lt;p&gt;To view the documentation in VS Code, open the command palette (&lt;b&gt;Ctrl+Shift+P&lt;/b&gt;) and select &lt;b&gt;XML: Open XML Documentation&lt;/b&gt;, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_816017" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenXMLDocumentation.png"&gt;&lt;img aria-describedby="caption-attachment-816017" class="wp-image-816017" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenXMLDocumentation.png" alt="The command palette shows the option to open the documentation homepage." width="640" height="133" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenXMLDocumentation.png 819w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenXMLDocumentation-300x62.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenXMLDocumentation-768x159.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-816017" class="wp-caption-text"&gt;Figure 1: Select &lt;strong&gt;XML: Open XML Documentation&lt;/strong&gt; to open the documentation homepage.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 2 shows the &lt;code&gt;vscode-xml&lt;/code&gt; documentation homepage.&lt;/p&gt; &lt;div id="attachment_813767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/XMLDocumentationPage.png"&gt;&lt;img aria-describedby="caption-attachment-813767" class="wp-image-813767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/XMLDocumentationPage-1024x562.png" alt="The documentation homepage has links to pages that describe how to use and configure the extension." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/XMLDocumentationPage-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/XMLDocumentationPage-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/XMLDocumentationPage-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813767" class="wp-caption-text"&gt;Figure 2: The &lt;code&gt;vscode-xml&lt;/code&gt; documentation homepage and user guide.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The setting descriptions now contain links to the documentation. As shown in Figure 3, you can use these links to get more information about a particular setting.&lt;/p&gt; &lt;div id="attachment_813777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenEmptyElementsDocumentation.gif"&gt;&lt;img aria-describedby="caption-attachment-813777" class="wp-image-813777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenEmptyElementsDocumentation-1024x503.gif" alt="The VS Code settings page includes a link to the Empty Elements XML formatting option." width="640" height="314" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenEmptyElementsDocumentation-1024x503.gif 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenEmptyElementsDocumentation-300x147.gif 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/OpenEmptyElementsDocumentation-768x378.gif 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813777" class="wp-caption-text"&gt;Figure 3: Click a link to view the detailed documentation for that setting.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The new, embedded documentation should provide a quick start for developers using the &lt;code&gt;vscode-xml&lt;/code&gt; extension.&lt;/p&gt; &lt;h2&gt;Show the referenced grammar&lt;/h2&gt; &lt;p&gt;If an XML document is associated with one or more XSD or DTD schemas, a &lt;b&gt;Grammars&lt;/b&gt; entry now appears in the document outline, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_816027" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar.png"&gt;&lt;img aria-describedby="caption-attachment-816027" class="wp-image-816027 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar-1024x317.png" alt="The Grammars entry in this screenshot shows information about the referenced schema dressSize.xsd." width="640" height="198" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar-1024x317.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar-300x93.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar-768x237.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/ShowReferencedGrammar.png 1210w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-816027" class="wp-caption-text"&gt;Figure 4: Click the &lt;strong&gt;Grammars&lt;/strong&gt; entry for information about a referenced schema.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The document outline includes the URL location of each schema that is referenced in the document. The outline also lists whether or not the schema is being held within the local cache. As well, the outline lists the binding method that the document uses to associate with the schema. This feature should assist developers with validating XML documents with schemas.&lt;/p&gt; &lt;h2&gt;Customize XML symbols outlines&lt;/h2&gt; &lt;p&gt;The XML symbols outline displays DOM elements, processing instructions, and declarations for DTD elements, entities, and attribute lists by default. The outline does not automatically display DOM attributes and text nodes. Excluding attributes and text nodes improves performance, but developers sometimes need to see these elements.&lt;/p&gt; &lt;p&gt;With this update, we introduced a new option for configuring the symbols outline. Figure 5 shows a sample Maven POM with the default outline.&lt;/p&gt; &lt;div id="attachment_813837" style="width: 522px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-813837" class="wp-image-813837 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutline.png" alt="A Maven document showing the default outline." width="512" height="169" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutline.png 512w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutline-300x99.png 300w" sizes="(max-width: 512px) 100vw, 512px" /&gt;&lt;p id="caption-attachment-813837" class="wp-caption-text"&gt;Figure 5: The default outline in a Maven document.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When viewing a Maven &lt;code&gt;pom.xml&lt;/code&gt;, it is important to be able to see the content of the text nodes. Figure 6 shows the updated document displaying these text elements.&lt;/p&gt; &lt;div id="attachment_813857" style="width: 522px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-813857" class="wp-image-813857 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutlineWithText.png" alt="The updated outline displays the content of text elements." width="512" height="168" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutlineWithText.png 512w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/SampleMavenOutlineWithText-300x98.png 300w" sizes="(max-width: 512px) 100vw, 512px" /&gt;&lt;p id="caption-attachment-813857" class="wp-caption-text"&gt;Figure 6: The updated outline showing text elements for the same document.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Using the new XML symbols filters&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;vscode-xml&lt;/code&gt; extension provides a new setting called &lt;code&gt;xml.symbols.filters&lt;/code&gt;, which you can use to select which DOM nodes are displayed as symbols in the outline. The snippet below shows the setting to display text nodes in a &lt;code&gt;pom.xml&lt;/code&gt; files:&lt;/p&gt; &lt;pre&gt;"xml.symbols.filters": [ // Declaration of symbols filter for maven 'pom.xml' to show all text nodes in the outline. { "pattern": "pom.xml", "expressions": [ { "xpath": "//text()" } ] } ] &lt;/pre&gt; &lt;h3&gt;Using xml.symbols.filters for Spring XML&lt;/h3&gt; &lt;p&gt;The filter is versatile for different types of files. For example, when editing Spring XML files, you probably want to see the &lt;code&gt;@id&lt;/code&gt; attributes. Here is the configuration to show &lt;code&gt;@id&lt;/code&gt; attributes in a Spring XML file outline:&lt;/p&gt; &lt;pre&gt;"xml.symbols.filters": [ // Declaration of symbols filter for Spring beans to show all @id of the elements in the outline. { "pattern": "bean*.xml", "expressions": [ { "xpath": "//@id" } ] } ] &lt;/pre&gt; &lt;p&gt;Figure 7 shows an outline displayed in VS Code with the Spring XML &lt;code&gt;@id&lt;/code&gt; attributes.&lt;/p&gt; &lt;div id="attachment_816047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-816047" class="wp-image-816047 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SymbolsSpring-1024x314.png" alt="A Spring XML file with id attributes shown." width="640" height="196" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SymbolsSpring-1024x314.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/SymbolsSpring-300x92.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/SymbolsSpring-768x236.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/SymbolsSpring.png 1137w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-816047" class="wp-caption-text"&gt;Figure 7: The outline now includes &lt;code&gt;@id&lt;/code&gt; attributes.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Note that the &lt;code&gt;pattern&lt;/code&gt; entry is a &lt;a target="_blank" rel="nofollow" href="https://www.malikbrowne.com/blog/a-beginners-guide-glob-patterns"&gt;glob pattern&lt;/a&gt; that the extension uses to select the files that it will filter. The &lt;code&gt;expressions&lt;/code&gt; entry is an array of XPaths that the extension uses to filter the symbols. See the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-xml/blob/master/docs/Symbols.md#xmlsymbolsfilters"&gt;symbols filters documentation&lt;/a&gt; for more information about the new XML symbols filters.&lt;/p&gt; &lt;h2&gt;Aggregate schema errors&lt;/h2&gt; &lt;p&gt;If you reference an invalid schema, errors appear in the document that references the schema. In this update, we&amp;#8217;ve grouped these errors. Schema errors are now shown at the range in the document where the schema is referenced. As an example, consider Figure 8, which shows a broken XSD schema.&lt;/p&gt; &lt;div id="attachment_813867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-813867" class="wp-image-813867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BadSchemaGroceryList-1024x562.png" alt="The grocery-list element is defined with several food elements as its children, but these elements are not defined." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BadSchemaGroceryList-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BadSchemaGroceryList-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BadSchemaGroceryList-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-813867" class="wp-caption-text"&gt;Figure 8: A broken XSD schema displayed in VS Code.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, if we make an XML document that is associated with the schema using &lt;code&gt;xsi:noNamespaceSchemaLocation&lt;/code&gt;, the errors are reported on the &lt;code&gt;xsi:noNamespaceSchemaLocation&lt;/code&gt; attribute, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_813877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-813877" class="wp-image-813877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/ReferencesBadSchemaGroceryList-1024x562.png" alt="Hovering over the reference to the schema opens a pop-up that lists the five errors in the schema. You can click on then open the schema to the location of the errors." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/ReferencesBadSchemaGroceryList-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/ReferencesBadSchemaGroceryList-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/ReferencesBadSchemaGroceryList-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-813877" class="wp-caption-text"&gt;Figure 9: Hover over a reference to a broken schema to see a list of errors.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The error aggregation also works for external DTD references, &lt;code&gt;xsi:schemaLocation&lt;/code&gt;, and the &lt;code&gt;xml-model&lt;/code&gt; processing instruction.&lt;/p&gt; &lt;h2&gt;Reports and quick fixes for missing closing tag errors&lt;/h2&gt; &lt;p&gt;This update improves the diagnostics for missing closing tags in elements. The before-and-after screens in Figure 10 let you see the improvements to error reporting for a closing tag with no corresponding opening tag.&lt;/p&gt; &lt;div id="attachment_813887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag1.png"&gt;&lt;img aria-describedby="caption-attachment-813887" class="wp-image-813887 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag1-1024x576.png" alt="Comparing two screens shows the improvements to error reporting for a closing tag that has no corresponding opening tag." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag1-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag1-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag1-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813887" class="wp-caption-text"&gt;Figure 10: Changes to error reporting for a closing tag that has no corresponding opening tag.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The screens in Figure 11 highlight the difference in error reporting for an opening tag that has no corresponding closing tag.&lt;/p&gt; &lt;div id="attachment_813897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag2.png"&gt;&lt;img aria-describedby="caption-attachment-813897" class="wp-image-813897 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag2-1024x576.png" alt="Comparing two screens shows the improvements to error reporting for an opening tag that has no corresponding closing tag." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag2-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag2-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag2-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813897" class="wp-caption-text"&gt;Figure 11: Changes to error reporting for an opening tag that has no corresponding closing tag.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The screens in Figure 12 highlight the improvements to error reporting for an incomplete closing tag.&lt;/p&gt; &lt;div id="attachment_813907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag3.png"&gt;&lt;img aria-describedby="caption-attachment-813907" class="wp-image-813907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag3-1024x576.png" alt="Comparing two screens shows the improvements to error reporting for an incomplete closing tag." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag3-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag3-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/BeforeAfterETag3-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813907" class="wp-caption-text"&gt;Figure 12: Changes to error reporting for an incomplete closing tag.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We also improved quick fixes for missing, incomplete, or invalid closing tags, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_817527" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-817527" class="wp-image-817527 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/vscode-quickfixes.gif" alt="Quick fixes update incomplete closing tags in a malformed XML document." width="640" height="451" /&gt;&lt;p id="caption-attachment-817527" class="wp-caption-text"&gt;Figure 13: A quick fix updates incomplete closing tags in a malformed XML document.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Document links in catalogs&lt;/h2&gt; &lt;p&gt;We added new document links for the &lt;code&gt;uri&lt;/code&gt; and &lt;code&gt;catalog&lt;/code&gt; attributes in XML catalogs. These attributes are used to link catalogs to schemas and other catalogs. The links will point to the correct file if you use the &lt;code&gt;xml:base&lt;/code&gt; attribute with the &lt;code&gt;&amp;#60;group&amp;#62;&lt;/code&gt; element. Figure 14 demonstrates using the new document links between catalogs and entries.&lt;/p&gt; &lt;div id="attachment_814007" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SeemlessCatalogNavigation.gif"&gt;&lt;img aria-describedby="caption-attachment-814007" class="size-full wp-image-814007" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/SeemlessCatalogNavigationOptimized.gif" alt="Links create seamless navigation between catalogs and their entries." width="640" height="315" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-814007" class="wp-caption-text"&gt;Figure 14: Use document links to navigate between linked catalogs and their entries.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;New formatting options for xsi:schemaLocation&lt;/h2&gt; &lt;p&gt;Inspired by other XML tools, we implemented new formatting styles for &lt;code&gt;xsi:schemaLocation&lt;/code&gt;. You can now choose between three formats shown in Figure 15 through Figure 17.&lt;/p&gt; &lt;p&gt;Figure 15 shows the result of selecting &lt;code&gt;none&lt;/code&gt; for the &lt;code&gt;xsi:schemaLocation&lt;/code&gt; format.&lt;/p&gt; &lt;div id="attachment_813947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatNone.png"&gt;&lt;img aria-describedby="caption-attachment-813947" class="wp-image-813947 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatNone-1024x562.png" alt="Selecting 'none' leaves the content unchanged." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatNone-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatNone-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatNone-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813947" class="wp-caption-text"&gt;Figure 15: Select &lt;b&gt;None&lt;/b&gt; to leave the content unchanged.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 16 shows the result of selecting &lt;code&gt;on element&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_813957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnElement.png"&gt;&lt;img aria-describedby="caption-attachment-813957" class="wp-image-813957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnElement-1024x562.png" alt="The 'on element' format adds new lines after each namespace and URI." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnElement-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnElement-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnElement-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813957" class="wp-caption-text"&gt;Figure 16: Select &lt;b&gt;On element&lt;/b&gt; to add new lines after each namespace and URI.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 17 shows the format for &lt;code&gt;on pair&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_813967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnPair.png"&gt;&lt;img aria-describedby="caption-attachment-813967" class="wp-image-813967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnPair-1024x562.png" alt="The 'on pair' format adds new lines after each namespace-URI pair, so that each line contains one schema reference." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnPair-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnPair-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/schemaLocationFormatOnPair-768x421.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-813967" class="wp-caption-text"&gt;Figure 17: Select &lt;b&gt;On pair&lt;/b&gt; to add new lines after each namespace-URI pair.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;The updated XML extension for VS Code brings many features for editing and navigating XML documents in VS Code. We want to thank the following contributors who worked to make this update amazing:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Alex Boyko (BoykoAlex)&lt;/li&gt; &lt;li&gt;Max Hohenegger (Treehopper)&lt;/li&gt; &lt;li&gt;Ryan Zegray (rzgry)&lt;/li&gt; &lt;li&gt;tcheng (a2975667)&lt;/li&gt; &lt;li&gt;Yatao Li (yatli)&lt;/li&gt; &lt;li&gt;Simon Sobisch (GitMensch)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can use the following channels to get more information about the XML extension for VS Code and report any issues with the 0.14.0 release:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-xml/issues/new/choose"&gt;vscode-xml GitHub&lt;/a&gt; to report an issue.&lt;/li&gt; &lt;li&gt;See the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-xml/tree/master/docs"&gt;vscode-xml documentation&lt;/a&gt; to learn more about the updates discussed in this article.&lt;/li&gt; &lt;li&gt;Visit the &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer/vscode-xml/blob/master/CHANGELOG.md"&gt;vscode-xml changelog&lt;/a&gt; for a list of the most recent updates.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#38;linkname=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fvscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code%2F&amp;#038;title=vscode-xml%201.14.0%3A%20A%20more%20customizable%20XML%20extension%20for%20VS%20Code" data-a2a-url="https://developers.redhat.com/blog/2020/11/10/vscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code/" data-a2a-title="vscode-xml 1.14.0: A more customizable XML extension for VS Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/10/vscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code/"&gt;vscode-xml 1.14.0: A more customizable XML extension for VS Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DpVBUR-CWPY" height="1" width="1" alt=""/&gt;</content><summary>Red Hat’s XML extension for Visual Studio Code (VS Code) has improved significantly since the last release. This article is an overview of the most notable updates in the vscode-xml extension 0.14.0 release. Improvements include embedded settings documentation, customizable document outlines, links for seamless XML catalog navigation, and error aggregation for schema validation. Embedded settings ...</summary><dc:creator>David Thompson</dc:creator><dc:date>2020-11-10T08:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/10/vscode-xml-1-14-0-a-more-customizable-xml-extension-for-vs-code/</feedburner:origLink></entry><entry><title>You (probably) need liveness and readiness probes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-1m9CsCAu9I/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="liveness probe" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="performance testing" scheme="searchisko:content:tags" /><category term="readiness probe" scheme="searchisko:content:tags" /><category term="startup probe" scheme="searchisko:content:tags" /><author><name>Benjamin Porter</name></author><id>searchisko:content:id:jbossorg_blog-you_probably_need_liveness_and_readiness_probes</id><updated>2020-11-10T08:00:21Z</updated><published>2020-11-10T08:00:21Z</published><content type="html">&lt;p&gt;One of the most common questions I get as a consultant is, &amp;#8220;What is the difference between &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/"&gt;a liveness and a readiness probe&lt;/a&gt;?&amp;#8221; The next most frequent question is, &amp;#8220;Which one does my application need?&amp;#8221;&lt;/p&gt; &lt;p&gt;Anyone who has tried &lt;a target="_blank" rel="nofollow" href="https://duckduckgo.com/"&gt;Duck Duck Go&lt;/a&gt;-ing these questions knows that they are difficult to answer using an internet search. In this article, I hope to help you answer these questions for yourself. I will share my opinion about the best way to use liveness and readiness probes in applications deployed to &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt;. I&amp;#8217;m not offering a hard prescription but rather a general framework that you can use to make your own architectural decisions. Each application is different, and these differences might require adapting the &amp;#8220;rules&amp;#8221; you learn here.&lt;/p&gt; &lt;p&gt;To help make the abstract more concrete, I offer four generic example applications. For each one, we&amp;#8217;ll explore whether and how to configure liveness and readiness probes. Before we dive into the examples, let&amp;#8217;s look more closely at the two different probe types.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; has recently adopted a new &amp;#8220;startup&amp;#8221; probe &lt;a href="https://developers.redhat.com/blog/2020/07/20/best-practices-using-health-checks-in-the-openshift-4-5-web-console/"&gt;available in OpenShift 4.5 clusters&lt;/a&gt;. The startup probe does not replace liveness and readiness probes. You&amp;#8217;ll quickly understand the startup probe once you understand liveness and readiness probes. I won&amp;#8217;t cover startup probes here.&lt;/p&gt; &lt;h2&gt;Liveness and readiness probes&lt;/h2&gt; &lt;p&gt;&lt;em&gt;Liveness&lt;/em&gt; and &lt;em&gt;readiness&lt;/em&gt; are the two main probe types available in OpenShift. They have similar configuration APIs but different meanings to the platform.&lt;/p&gt; &lt;p&gt;When a liveness probe fails, it signals to OpenShift that the probed container is dead and should be restarted. When a readiness probe fails, it indicates to OpenShift that the container being probed is not ready to receive incoming network traffic. The application might become ready in the future, but it should not receive traffic now.&lt;/p&gt; &lt;p&gt;If the liveness probe succeeds while the readiness probe fails, OpenShift knows that the container is not ready to receive network traffic but is working to become ready. For example, this is common in applications that take time to initialize or to handle long-running calls synchronously. (Handling long-running calls synchronously is an anti-pattern, but unfortunately, we are stuck with it in some legacy applications.)&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll zoom in on the specific uses for each of these probe types. Once we understand the probe types in isolation, I&amp;#8217;ll show you examples of how they work together in OpenShift.&lt;/p&gt; &lt;h2&gt;What are liveness probes for?&lt;/h2&gt; &lt;p&gt;A liveness probe sends a signal to OpenShift that the container is either alive (passing) or dead (failing). If the container is alive, then OpenShift does nothing because the current state is good. If the container is dead, then OpenShift attempts to heal the application by restarting it.&lt;/p&gt; &lt;p&gt;The name &lt;i&gt;liveness probe&lt;/i&gt; expresses a semantic meaning. In effect, the probe answers the true-or-false question: &amp;#8220;Is this container alive?&amp;#8221;&lt;/p&gt; &lt;h2&gt;What if I don&amp;#8217;t specify a liveness probe?&lt;/h2&gt; &lt;p&gt;If you don&amp;#8217;t specify a liveness probe, then OpenShift will decide whether to restart your container based on the status of the container&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://felipec.wordpress.com/2013/11/04/init/"&gt;PID 1&lt;/a&gt; process. The PID 1 process is the parent process of all other processes that run inside the container. Because each container begins life with its own &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Linux_namespaces#Process_ID_(pid)"&gt;process namespace&lt;/a&gt;, the first process in the container will assume &lt;a target="_blank" rel="nofollow" href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/"&gt;the special duties of PID 1&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the PID 1 process exits and no liveness probe is defined, OpenShift assumes (usually safely) that the container has died. Restarting the process is the only application-agnostic, universally effective corrective action. As long as PID 1 is alive, regardless of whether any child processes are running, OpenShift will leave the container running.&lt;/p&gt; &lt;p&gt;If your application is a single process, and that process is PID 1, then this default behavior might be precisely what you want—meaning that you don&amp;#8217;t need a liveness probe. If you are using an &lt;code&gt;init&lt;/code&gt; tool such as &lt;a target="_blank" rel="nofollow" href="https://github.com/krallin/tini"&gt;tini&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="https://engineeringblog.yelp.com/2016/01/dumb-init-an-init-for-docker.html"&gt;dumb-init&lt;/a&gt;, then it might &lt;em&gt;not&lt;/em&gt; be what you want. The decision of whether to define your own liveness probe instead of using the default behavior is specific to each application&lt;/p&gt; &lt;h2&gt;What are readiness probes for?&lt;/h2&gt; &lt;p&gt;OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/architecture/core_concepts/pods_and_services.html#services"&gt;services&lt;/a&gt; use readiness probes to know whether the container being probed is ready to start receiving network traffic. If your container enters a state where it is still alive but cannot handle incoming network traffic (a common scenario during startup), you want the readiness probe to fail. That way, OpenShift will not send network traffic to a container that isn&amp;#8217;t ready for it. If OpenShift did prematurely send network traffic to the container, it could cause the load balancer (or router) to return a 502 error to the client and terminate the request; either that or the client would get a &amp;#8220;connection refused&amp;#8221; error message.&lt;/p&gt; &lt;p&gt;Like the liveness probe, the name of the &lt;i&gt;readiness probe&lt;/i&gt; conveys a semantic meaning. In effect, this probe answers the true-or-false question: &amp;#8220;Is this container ready to receive network traffic?&amp;#8221;&lt;/p&gt; &lt;h2&gt;What if I don&amp;#8217;t specify a readiness probe?&lt;/h2&gt; &lt;p&gt;If you don&amp;#8217;t specify a readiness probe, OpenShift will assume that the container is ready to receive traffic as soon as &lt;a target="_blank" rel="nofollow" href="https://felipec.wordpress.com/2013/11/04/init/"&gt;PID 1&lt;/a&gt; has started. This is &lt;em&gt;never&lt;/em&gt; what you want.&lt;/p&gt; &lt;p&gt;Assuming readiness without checking for it will cause errors (such as 502s from the OpenShift router) anytime a new container starts up, such as on scaling events or deployments. Without a readiness probe, you will get bursts of errors every time you deploy, as the old containers terminate and the new ones start up. If you are using &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/nodes/pods/nodes-pods-autoscaling.html"&gt;autoscaling&lt;/a&gt;, then depending on the metric threshold you set, new instances could be started and stopped at any time, especially during times of fluctuating load. As the application scales up or down, you will get bursts of errors, as containers that are not quite ready to receive network traffic are included in the load-balancer distribution.&lt;/p&gt; &lt;p&gt;You can easily fix these problems by specifying a readiness probe. The probe gives OpenShift a way to ask your container if it is ready to receive traffic.&lt;/p&gt; &lt;p&gt;Next, let&amp;#8217;s look at specific examples that will help us understand the difference between the two types of probes and the importance of getting them right.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The fact that there are different types of probes with identical APIs is a frequent source of confusion. But the existence of two or more probe types is good design: It makes OpenShift flexible for various application types. The availability of both liveness and readiness probes is critical to OpenShift&amp;#8217;s reputation for being a &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/cloud-computing/what-is-caas"&gt;Container-as-a-Service &lt;/a&gt;that accommodates a wide range of applications.&lt;/p&gt; &lt;h2&gt;Example 1: A static file server (Nginx)&lt;/h2&gt; &lt;div id="attachment_751057" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Problem-e1597967760719.png"&gt;&lt;img aria-describedby="caption-attachment-751057" class="wp-image-751057" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Problem-e1597967760719.png" alt="A diagram of a Nginx static file server." width="640" height="217" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751057" class="wp-caption-text"&gt;Figure 1: Example of an Nginx static file server implementation.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The example application shown in Figure 1 is a simple static file server that uses &lt;a target="_blank" rel="nofollow" href="https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/"&gt;Nginx&lt;/a&gt; to serve files. Startup time is low, and it is straightforward to check whether the server is handling traffic: You can request a known page and verify that a &lt;a target="_blank" rel="nofollow" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;200 HTTP response&lt;/a&gt; is returned.&lt;/p&gt; &lt;h3&gt;Do we need a liveness probe?&lt;/h3&gt; &lt;p&gt;The application starts up quickly and will exit if it encounters an error that prevents it from serving pages. So, in this case, we do not need a liveness probe. An exited Nginx process means that the application has died and needs to be restarted. (Note that issues like &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/using_selinux/index"&gt;SELinux&lt;/a&gt; problems or misconfigured filesystem permissions will not cause Nginx to exit, but a restart wouldn&amp;#8217;t fix those anyway.)&lt;/p&gt; &lt;h3&gt;Do we need a readiness probe?&lt;/h3&gt; &lt;p&gt;Nginx is handling incoming network traffic, so we &lt;em&gt;do&lt;/em&gt; need a readiness probe. Anytime you are handling network traffic, you need a readiness probe to avoid encountering container startup errors, such as deployment and autoscaling. Nginx starts up quickly, so you might get lucky, but we still want to avoid forwarding traffic until the container is ready, as per best practice.&lt;/p&gt; &lt;h3&gt;Updating the server with a readiness probe&lt;/h3&gt; &lt;p&gt;We will need to make specific changes for each example, but first, here is the top part of the &lt;code&gt;Deployment&lt;/code&gt;. We&amp;#8217;ll change this file as we go, but the top part will remain the same. For future examples, we will only need to modify the template spec.&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata: labels: app: application-nginx name: application-nginx spec: replicas: 1 selector: matchLabels: app: application-nginx template: metadata: labels: app: application-nginx spec: # Will appear below as it changes &lt;/pre&gt; &lt;p&gt;Here is the probe configuration for the first example:&lt;/p&gt; &lt;pre&gt; spec: containers: - image: quay.io/&amp;#60;username&amp;#62;/nginx:latest name: application-nginx imagePullPolicy: Always ports: - containerPort: 8443 protocol: TCP readinessProbe: httpGet: scheme: HTTPS path: /index.html port: 8443 initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;div id="attachment_751067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2.png"&gt;&lt;img aria-describedby="caption-attachment-751067" class="wp-image-751067 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2-1024x872.png" alt="A diagram of the Nginx static file server implementation with the readiness probe configured." width="640" height="545" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2-1024x872.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2-300x255.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2-768x654.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example1-Solution2.png 1123w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751067" class="wp-caption-text"&gt;Figure 2: The Nginx static file server implementation with the readiness probe configured.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Example 2: A jobs server (no REST API)&lt;/h2&gt; &lt;p&gt;Many applications have an HTTP web component, as well as an asynchronous &amp;#8220;jobs&amp;#8221; component. Jobs do not need a readiness check because they don&amp;#8217;t handle incoming network traffic. However, they do need a liveness check. If the process running the jobs dies, then the container is worthless, and jobs will accumulate in the queue. Typically, restarting the container is the correct thing to do, so a liveness probe is ideal here.&lt;/p&gt; &lt;p&gt;The example application in Figure 3 is a simple job server that pops and runs tasks from a &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/amq"&gt;queue&lt;/a&gt;. It does not directly handle incoming network traffic.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_751077" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Problem.png"&gt;&lt;img aria-describedby="caption-attachment-751077" class="wp-image-751077" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Problem.png" alt="A diagram of the jobs server implementation without a liveness probe." width="640" height="426" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Problem.png 1013w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Problem-300x200.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Problem-768x512.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751077" class="wp-caption-text"&gt;Figure 3: The jobs server implementation without a liveness probe.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I&amp;#8217;ve already mentioned that this type of application benefits from a liveness probe, but it doesn&amp;#8217;t hurt to go through the process of inquiry anyway.&lt;/p&gt; &lt;h3&gt;Do we need a liveness probe?&lt;/h3&gt; &lt;p&gt;When our job is running properly, it will be a living process. If the jobs container stops working, it is most likely a crash, unhandled exception, or something similar. How we set up the probe, in this case, depends on whether our job process is running as PID 1.&lt;/p&gt; &lt;p&gt;If our job process is PID 1, it will exit when it encounters an exception. With no liveness probe specified, OpenShift will see the exit of PID 1 as a death and will restart the container. For a trivial jobs server, a restart might not be what we want.&lt;/p&gt; &lt;p&gt;In real life, however, things can sometimes be more complicated. For example, if our jobs process encounters a &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Deadlock"&gt;deadlock&lt;/a&gt;, it might still appear to be alive because the process is running, but it&amp;#8217;s clearly in a failed state and should be restarted.&lt;/p&gt; &lt;p&gt;To help detect deadlock, our application will write the current system time in milliseconds to a file at &lt;code&gt;/tmp/jobs.update&lt;/code&gt; whenever it processes a job. This time will then be checked with a shell command (via the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/developer_guide/dev-guide-application-health"&gt;exec&lt;/a&gt; liveness probe) to ensure that the current job has not been running for longer than a given timeout value. The application can then check itself for liveness by executing  &lt;code&gt;/usr/bin/my-application-jobs --alive&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We can set up a liveness probe as follows (again, I am omitting the first part of the &lt;code&gt;Deployment&lt;/code&gt; YAML file, which I showed previously):&lt;/p&gt; &lt;pre&gt; spec: containers: - image: quay.io/&amp;#60;username&amp;#62;/my-application-jobs:latest name: my-application-jobs imagePullPolicy: Always livenessProbe: exec: command: - /bin/sh - -c - "/usr/bin/my-application-jobs --alive" initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;h3&gt;Do we need a readiness probe?&lt;/h3&gt; &lt;p&gt;In this case, there is no need for a readiness probe. Remember that a readiness probe sends a signal to OpenShift that the container is ready to handle network traffic and so can be added to the load balancer. Because this application does not handle incoming network traffic, it doesn&amp;#8217;t need to be checked for readiness. We can leave off the readiness probe. Figure 4 shows the jobs server implementation with a liveness probe configured.&lt;/p&gt; &lt;div id="attachment_751087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution.png"&gt;&lt;img aria-describedby="caption-attachment-751087" class="wp-image-751087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution-1024x870.png" alt="A diagram of the jobs server implementation with a liveness probe." width="640" height="544" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution-1024x870.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution-300x255.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution-768x653.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example2-Solution.png 1125w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751087" class="wp-caption-text"&gt;Figure 4: The jobs server implementation with a liveness probe.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Example 3: A server-side rendered application with an API&lt;/h2&gt; &lt;div id="attachment_751097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Problem.png"&gt;&lt;img aria-describedby="caption-attachment-751097" class="wp-image-751097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Problem-1024x348.png" alt="A diagram of the SSR application without any probes configured." width="640" height="218" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Problem-1024x348.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Problem-300x102.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Problem-768x261.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751097" class="wp-caption-text"&gt;Figure 5: The SSR application without any probes configured.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This example is a standard server-side rendered (SSR) application: It renders HTML pages on the server, on-demand, and sends them to the client. We could build an application like this using &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt;, PHP, Ruby on Rails, Django, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;, or any similar framework.&lt;/p&gt; &lt;h3&gt;Do we need a liveness probe?&lt;/h3&gt; &lt;p&gt;If the application starts up in a few seconds or less, then a liveness probe is probably unnecessary. If it takes more than a few seconds, we should put in a liveness probe to ensure that the container initializes without error rather than crashing.&lt;/p&gt; &lt;p&gt;In this case, we could use an &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/3.11/html/developer_guide/dev-guide-application-health"&gt;exec&lt;/a&gt; type of liveness probe, which runs a shell command to ensure that things are still running. This command will vary depending on the application. For example, if the app writes a PID file, we could check that it is still alive:&lt;/p&gt; &lt;pre&gt; livenessProbe: exec: command: - /bin/sh - -c - "[ -f /run/my-application-web.pid ] &amp;#38;&amp;#38; ps -A | grep my-application-web" initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;h3&gt;Do we need a readiness probe?&lt;/h3&gt; &lt;p&gt;Because this application handles incoming network requests, we will &lt;em&gt;definitely&lt;/em&gt; want a readiness probe. Without a readiness probe, OpenShift will immediately send network traffic to our container after starting it, whether the application is ready or not. If the container starts dropping requests but hasn&amp;#8217;t crashed, it will continue to receive traffic indefinitely, which is certainly not what we want.&lt;/p&gt; &lt;p&gt;We want OpenShift to remove the container from the load balancer if it ceases to return healthy responses. We can use a readiness probe like this one to signal to OpenShift that the container is ready to receive network traffic:&lt;/p&gt; &lt;pre&gt; readinessProbe: httpGet: scheme: HTTPS path: /healthz port: 8443 initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;p&gt;For easy reference, here&amp;#8217;s the complete YAML for this example app:&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata: labels: app: backend-service name: backend-service spec: replicas: 1 selector: matchLabels: app: backend-service template: metadata: labels: app: backend-service spec: containers: - image: quay.io/&amp;#60;username&amp;#62;/backend-service:latest name: backend-service imagePullPolicy: Always ports: - containerPort: 8443 protocol: TCP readinessProbe: httpGet: scheme: HTTPS path: /healthz port: 8443 initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;p&gt;Figure 6 shows a diagram of the SSR application with both liveness and readiness probes configured.&lt;/p&gt; &lt;div id="attachment_751107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution.png"&gt;&lt;img aria-describedby="caption-attachment-751107" class="wp-image-751107 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution-1024x872.png" alt="A diagram of the SSR application with both liveness and readiness probes configured." width="640" height="545" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution-1024x872.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution-300x255.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution-768x654.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example3-Solution.png 1123w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751107" class="wp-caption-text"&gt;Figure 6: The SSR application with both liveness and readiness probes configured.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Example 4: Putting it all together&lt;/h2&gt; &lt;p&gt;In a complete, complex, and realistic application, you might have elements of all three of the previous examples. Taking them individually is useful for considering probes, but it&amp;#8217;s also helpful to see them working together to serve a large application with millions of requests. This final example consolidates the other three.&lt;/p&gt; &lt;div id="attachment_751117" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Problem.png"&gt;&lt;img aria-describedby="caption-attachment-751117" class="wp-image-751117 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Problem-1024x611.png" alt="A diagram of the complete OpenShift example application (without probes)." width="640" height="382" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Problem-1024x611.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Problem-300x179.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Problem-768x458.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751117" class="wp-caption-text"&gt;Figure 7: A realistic OpenShift application example for exploring the use of probes.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This example application consists of three container pieces:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;The application server&lt;/strong&gt;: This server provides a REST API and performs server-side rendering for some pages. This setup is widespread, as applications that begin as simple server-side renderers are later enhanced to provide REST API endpoints.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;A Nginx static file server&lt;/strong&gt;: This container has two jobs: It renders static assets for the application (such as JavaScript and CSS assets). It also provides TLS (Transport Layer Security) termination for the application server by acting as a reverse proxy for certain paths. This is also a widespread setup.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;A jobs server&lt;/strong&gt;: This container does not handle incoming network traffic on its own but rather processes jobs. The application server pushes each job to a queue, where the jobs server picks it up and executes it. The jobs server frees up the application server to focus on processing network requests rather than running long threads.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The example app also includes a couple of data persistence services:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;A relational database&lt;/strong&gt;: The relational database is the source of state for our application. Nearly every application needs a database of some kind, and relational databases are the majority choice.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;A queue&lt;/strong&gt;: The queue provides a first-in, first-out (FIFO) way for the application server to communicate tasks to the jobs server. The app server will always push, and the jobs server will pop.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Our containers are spread into two pods:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first pod consists of our application server and the Nginx TLS terminator or static file server. This simplifies the application server&amp;#8217;s management by allowing it to communicate directly over HTTP. By sharing a pod, these containers can communicate securely and directly with minimal latency. They also can access a shared volume space. The containers need to be scaled together and treated as a single unit, so a pod is the perfect unit of organization.&lt;/li&gt; &lt;li&gt;The second pod consists of the jobs server. This server needs to scale independently of the other containers, so it must be in its own pod. Because all state is held in the database and queue, the jobs server can easily access the resources that it needs.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you followed the previous examples, the solution here should not be surprising. To integrate, we switch the application server to use HTTP and port 8080 instead of HTTPS and 8443 for the readiness probe. We also add a liveness probe to the application server to cover us if the application server doesn&amp;#8217;t exit on error. This way, our container will be restarted by the Kubelet once it is &amp;#8220;dead&amp;#8221;:&lt;/p&gt; &lt;pre&gt;# Pod One - Application Server and Nginx apiVersion: apps/v1 kind: Deployment metadata: labels: app: my-application-web name: my-application-web spec: replicas: 1 selector: matchLabels: app: my-application-web template: metadata: labels: app: my-application-web spec: containers: - image: quay.io/&amp;#60;username&amp;#62;/my-application-nginx:latest name: my-application-nginx imagePullPolicy: Always ports: - containerPort: 8443 protocol: TCP livenessProbe: exec: command: - /bin/sh - -c - "[ -f /run/nginx.pid ] &amp;#38;&amp;#38; ps -A | grep nginx" initialDelaySeconds: 10 periodSeconds: 5 readinessProbe: httpGet: scheme: HTTPS path: /index.html port: 8443 initialDelaySeconds: 10 periodSeconds: 5 - image: quay.io/&amp;#60;username&amp;#62;/my-application-app-server:latest name: my-application-app-server imagePullPolicy: Always ports: - containerPort: 8080 protocol: TCP livenessProbe: exec: command: - /bin/sh - -c - "/usr/bin/my-application-web --alive" initialDelaySeconds: 10 periodSeconds: 5 readinessProbe: httpGet: scheme: HTTP path: /healthz port: 8080 initialDelaySeconds: 10 periodSeconds: 5 # Pod Two - Jobs Server apiVersion: apps/v1 kind: Deployment metadata: labels: app: my-application-jobs name: my-application-jobs spec: replicas: 1 selector: matchLabels: app: my-application-jobs template: metadata: labels: app: my-application-jobs spec: containers: - image: quay.io/&amp;#60;username&amp;#62;/my-application-jobs:latest name: my-application-jobs imagePullPolicy: Always livenessProbe: exec: command: - /bin/sh - -c - "/usr/bin/my-application-jobs --alive" initialDelaySeconds: 10 periodSeconds: 5 &lt;/pre&gt; &lt;p&gt;Figure 8 shows the complete example applications with both probes configured.&lt;/p&gt; &lt;div id="attachment_751127" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution.png"&gt;&lt;img aria-describedby="caption-attachment-751127" class="wp-image-751127 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution-665x1024.png" alt="A diagram of the complete example applications with both probes configured." width="640" height="986" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution-665x1024.png 665w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution-195x300.png 195w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution-768x1182.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Probes-Example4-Solution.png 1206w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-751127" class="wp-caption-text"&gt;Figure 8: The complete example applications with both probes configured.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;What about identical liveness and a readiness probes?&lt;/h2&gt; &lt;p&gt;While this pattern is overused, in my opinion, there are cases where it makes sense. If the application starts experiencing failed HTTP calls, and will likely never come back to ready without a restart, then you probably want OpenShift to restart the pod. It would be better if your application recovered on its own, but that is sometimes not practical in the real world.&lt;/p&gt; &lt;p&gt;If you have an HTTP endpoint that is a good canary, you could set up a liveness probe and a readiness probe to hit this same endpoint. Using the same endpoint ensures that your pod will restart if it fails to return success on that endpoint.&lt;/p&gt; &lt;h2&gt;Final thoughts&lt;/h2&gt; &lt;p&gt;Liveness and readiness probes send different signals to OpenShift.  Each has a specific meaning, and they are not interchangeable. A failed liveness probe tells OpenShift to restart the container. A failed readiness probe tells OpenShift to hold off on sending traffic to that container.&lt;/p&gt; &lt;p&gt;There is no one-size-fits-all prescription for probes because the &amp;#8220;correct&amp;#8221; choice will vary depending on how the application is written. An application that can self-heal will need a different probe setup than one that simply crashes and dies.&lt;/p&gt; &lt;p&gt;When deciding on the correct probes for an application, I consider the probe&amp;#8217;s semantic meaning in conjunction with the application&amp;#8217;s behavior. Knowing that failing liveness probes will restart the container and failing readiness probes will remove it from the load balancer. It is usually not complicated to determine which probes the application needs.&lt;/p&gt; &lt;p&gt;We have considered realistic examples, but you might see considerably more complexity in real systems. For instance, in a &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Service-oriented_architecture"&gt;service-oriented architecture (SOA)&lt;/a&gt;, a service might depend on another service to handle requests. If the downstream service is not ready, should the readiness probe for the upstream be healthy or not? The answer is dependent on the application. You will need to do a cost/benefit analysis to determine whether the added complexity is worth it.&lt;/p&gt; &lt;p&gt;While probes are conceptually very simple, they can be complex in practice. The best way to narrow it down is to iterate! Do performance testing and chaos testing to determine how your configuration behaves and improve as you go. We rarely get it right the first time.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#38;linkname=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F10%2Fyou-probably-need-liveness-and-readiness-probes%2F&amp;#038;title=You%20%28probably%29%20need%20liveness%20and%20readiness%20probes" data-a2a-url="https://developers.redhat.com/blog/2020/11/10/you-probably-need-liveness-and-readiness-probes/" data-a2a-title="You (probably) need liveness and readiness probes"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/10/you-probably-need-liveness-and-readiness-probes/"&gt;You (probably) need liveness and readiness probes&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-1m9CsCAu9I" height="1" width="1" alt=""/&gt;</content><summary>One of the most common questions I get as a consultant is, “What is the difference between a liveness and a readiness probe?” The next most frequent question is, “Which one does my application need?” Anyone who has tried Duck Duck Go-ing these questions knows that they are difficult to answer using an internet search. In this article, I hope to help you answer these questions for yourself. I will ...</summary><dc:creator>Benjamin Porter</dc:creator><dc:date>2020-11-10T08:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/10/you-probably-need-liveness-and-readiness-probes/</feedburner:origLink></entry><entry><title>Peeking at the streams</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SJ2uXyHsksE/" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><author /><id>searchisko:content:id:jbossorg_blog-peeking_at_the_streams</id><updated>2020-11-10T00:00:00Z</updated><published>2020-11-10T00:00:00Z</published><content type="html">Mutiny is an event-driven Reactive Programming library. Like other reactive programming libraries, it uses streams as the primary construct. These streams convey events, and your code processes these events. Most of the time, your code is only interested in item and failure events. But there are other kinds of events...&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SJ2uXyHsksE" height="1" width="1" alt=""/&gt;</content><summary>Mutiny is an event-driven Reactive Programming library. Like other reactive programming libraries, it uses streams as the primary construct. These streams convey events, and your code processes these events. Most of the time, your code is only interested in item and failure events. But there are other kinds of events...</summary><dc:date>2020-11-10T00:00:00Z</dc:date><feedburner:origLink>https://quarkus.io/blog/mutiny-invoke-and-call/</feedburner:origLink></entry><entry><title>Contract first development - the event driven way!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gKpQrEcNzS8/contract-first-development-event-driven.html" /><category term="amq streams" scheme="searchisko:content:tags" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Contract First App Dev" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_christinalineng" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><category term="schema registry" scheme="searchisko:content:tags" /><category term="Service Registry" scheme="searchisko:content:tags" /><author><name>CHRISTINA の J老闆</name></author><id>searchisko:content:id:jbossorg_blog-contract_first_development_the_event_driven_way</id><updated>2020-11-10T23:10:34Z</updated><published>2020-11-09T15:53:00Z</published><content type="html">&lt;span id="docs-internal-guid-6c984566-7fff-2405-c19a-78c280f68c5d"&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Introduction:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Contract first application development is not limited to synchronized RESTFul API calls. With the adoption of event driven architecture, more developers are demanding a way to set up contracts between these asynchronous event publishers and consumers.. Sharing what data format that each subscriber is consuming, what data format is used from the event publisher, in a way OpenAPI standards is going to be very helpful.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;But in the asynchronous world, it is ever more complex, not only do you need to be caring about the data schema, there are different protocols, serializing, deserializing mechanisms, and various support libraries. In fact there are talks on AsyncAPI. But I am going to show you that what can be done today,&amp;nbsp; is to use ONE of the most commonly used solutions in building EDA, “Kafka”. And show how to do Contract First Application Development using Camel + Apicurio Registry.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;The Solutions:&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;I will be using Red Hat’s version of Kafka, AMQ Streams,&amp;nbsp; APIcurio as my service registry and finally using Apache Camel to build the contract first event driven application. . To spice things up I am going to be Avro and Protobuf. &amp;nbsp; (Normally you want to choose between one of them.)&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Rather than sending plain text like JSON or XML, binary representation is more compacted and efficient. And this works well with Kafka, since Kafka is using binary message format. In short,&amp;nbsp; Avro and Protobuf are just ways to serialize/deserialize the data. Both also provide schema in order to serialize/deserialize data. And we can use it as the contract for each topic that is publishing/consuming the events.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Avro is from Hadoop, more commonly used in Kafka, as it’s default serialization.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Protobuf is from Google, has two versions, here I am using proto 3.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Apricurio Registry is a datastore for standard event schemas and API designs. We are going to use it for our Schema management. Where we will use it to store all the schemas, and use it’s client serializer/deserializer to validate the event messages.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Camel is the perfect framework for connecting the dots, transforming messages to desired states. As it provides built-in libraries to connect to Kafka, built-in data format transforms for Avro/Protobuf. (This is a great feature if you want to process the body, it simplifies and marshal the data into POJO.)&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;There are two different approaches to do this:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ol style="margin-bottom: 0px; margin-top: 0px;"&gt;&lt;li dir="ltr" style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; list-style-type: upper-alpha; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Manually upload schema, and using default Camel dataformat component to&amp;nbsp; serialize/deserialize&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li dir="ltr" style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; list-style-type: upper-alpha; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Using the Apicurio Registry libraries to upload schema and serialize/deserialize&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Environment&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Here is what you need to have in the environment.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;ol style="margin-bottom: 0px; margin-top: 0px;"&gt;&lt;li dir="ltr" style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; list-style-type: upper-alpha; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Kafka Cluster (AMQ Streams)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li dir="ltr" style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; list-style-type: upper-alpha; vertical-align: baseline; white-space: pre;"&gt;&lt;p dir="ltr" role="presentation" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Apricurio Service Registry&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Solution A Camel built-in Dataformat components: Steps in a glance&lt;/span&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, using Camel Quarkus.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step One:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Go to this page to &lt;/span&gt;&lt;a href="https://code.quarkus.io/" style="text-decoration: none;"&gt;&lt;span style="color: #1155cc; font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; text-decoration-skip: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;https://code.quarkus.io/&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; to generate your bootstrap quarkus application.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;You will have a sample Camel project ready to go. Add all the dependencies needed for the project. Depending on the endpoint you want to connect to, and add the dependencies into the pom.xml file under the project.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add the dependencies you will need to convert between two serialize mechanisms, and place it into the Kafka topics.&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-quarkus-protobuf&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-quarkus-avro&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-quarkus-kafka&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-quarkus-stream&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add plugins to download the schema from registry. (Of course you can register a schema from local code too). But&amp;nbsp; I am assuming there is a separate person that will design and handle schema management.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;io.apicurio&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;apicurio-registry-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;${registry.version}&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goal&amp;gt;download&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;registryUrl&amp;gt;http://localhost:8080/api&amp;lt;/registryUrl&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;ids&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param1&amp;gt;demo-avro&amp;lt;/param1&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;param1&amp;gt;demo-protobuf&amp;lt;/param1&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/ids&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;outputDirectory&amp;gt;${project.basedir}/src/main/resources&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Note&lt;/span&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;: In configuration,&amp;nbsp; enter the location of the Registry. Also make sure you tell the plugin what schema to download and where to place it in the project.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step Two&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create the schema. Login to your Apricurio Service Registry, upload the schema.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Setup the topics that you want to use to populate the events.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add plugins to generate the POJO that we are going to be using for marshalling/unmarshalling. And it’s easier if we want to further process the data.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;1.8.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;sourceDirectory&amp;gt;${project.basedir}/src/main/resources&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;outputDirectory&amp;gt;${project.basedir}/src/main/java&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.xolstice.maven.plugins&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;protobuf-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;protocArtifact&amp;gt;com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}&amp;lt;/protocArtifact&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;outputDirectory&amp;gt;${project.basedir}/src/main/java&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;protoSourceRoot&amp;gt;${project.basedir}/src/main/resources&amp;lt;/protoSourceRoot&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;clearOutputDirectory&amp;gt;false&amp;lt;/clearOutputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;After adding the plugins, run the following command:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;`` mvn compile ``&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;It will generate the corresponding java source base on the schema that was loaded from the registry.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step Three&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add your Camel route in the MyRouteBuilder.java. Depending on what you want to do with the object.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;For example, the code here demonstrates how to use the built-in Protobuf component, and transform to the Protobuf object. Before sending the data as Byte Array into the Kafka Topics.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.marshal().protobuf("demo.camel.TransactionProtos$Transaction")&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.log("Sender: ${header.sender}")&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .toD("kafka:webtrans-quarkus?brokers=localhost:9092&amp;amp;key=${header.sender}&amp;amp;serializerClass=org.apache.kafka.common.serialization.ByteArraySerializer")&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Or this shows you how to use the built-in Camel Avro component to transform before sending the data as Byte Array into the Kafka Topics&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;AvroDataFormat format = new AvroDataFormat(Transaction.SCHEMA$);&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;....&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.marshal(format)&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.toD("kafka:transrec-quarkus?brokers=localhost:9092&amp;amp;groupId=producergroup&amp;amp;serializerClass=org.apache.kafka.common.serialization.ByteArraySerializer")&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;And it’s done.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Here are the working Camel Quarkus Project:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;I will discuss more in the next post.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;-----&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead of manually uploading the schemas to the registry, we will be using the Apicurio Registry libraries, by adding it to the Kafka configuration, it will automatically save the schema in the registry.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Here is how it’s done,&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Solution B - Apricurio Registry Libraries : Steps in a glance&lt;/span&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;, using Camel Java Main.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step One:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create a Camel Project using the archetypes.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: #fefefe; color: #4f51ae; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 10.5pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;mvn archetype:generate \&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: #fefefe; color: #4f51ae; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 10.5pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;-DarchetypeGroupId=org.apache.camel.archetypes \&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: #fefefe; color: #4f51ae; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 10.5pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;-DarchetypeArtifactId=camel-archetype-java \&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: #fefefe; color: #4f51ae; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 10.5pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;-DarchetypeVersion=3.5.0&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add the dependencies you will need to convert between two serialize mechanisms, and place it into the Kafka topics.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;io.apicurio&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;apicurio-registry-utils-converter&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;${registry.version}&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.glassfish.jersey.core&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;jersey-common&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;2.32&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-kafka&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.camel&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;camel-stream&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step Two:&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Create the schema and place the schema files into your application resource folder:&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-style: italic; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;${project.basedir}/src/main/resources&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Setup the topics that you want to use to populate the events.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add plugins to generate the POJO that we are going to be using for marshalling/unmarshalling. And it’s easier if we want to further process the data.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.avro&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;avro-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;1.8.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;phase&amp;gt;generate-sources&amp;lt;/phase&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goal&amp;gt;schema&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;sourceDirectory&amp;gt;${project.basedir}/src/main/resources&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;outputDirectory&amp;gt;${project.basedir}/src/main/java&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.xolstice.maven.plugins&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;protobuf-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/goals&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;protocArtifact&amp;gt;com.google.protobuf:protoc:${protobuf-version}:exe:${os.detected.classifier}&amp;lt;/protocArtifact&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;outputDirectory&amp;gt;${project.basedir}/src/main/java&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;protoSourceRoot&amp;gt;${project.basedir}/src/main/resources&amp;lt;/protoSourceRoot&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;clearOutputDirectory&amp;gt;false&amp;lt;/clearOutputDirectory&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/execution&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/executions&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;After adding the plugins, run the following command:&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;`` mvn compile ``&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Step Three:&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Add your Camel route in the MyRouteBuilder.java. Configure the Kafka component with the Apicurio registry libraries.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;For example, the code here demonstrates how to serialize Avro and deserialize Protobuf with Apicurio registry libraries. And automatically register the schema in the registry. Note you need to point to the registry URL by providing the “apicurio.registry.url”.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;serializerClass=io.apicurio.registry.utils.serde.AvroKafkaSerializer&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;deserializerClass=io.apicurio.registry.utils.serde.ProtobufKafkaDeserializer&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;additionalProperties.apicurio.registry.url=&lt;/span&gt;&lt;a href="http://localhost:8080/api" style="text-decoration: none;"&gt;&lt;span style="color: #1155cc; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; text-decoration-skip: none; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;"&gt;http://localhost:8080/api&lt;/span&gt;&lt;/a&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;additionalProperties.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;And in the Camel route, instantiate the two generated Avro/Protobuf classes aldds, work normally with your camel integration logic, and simply send it to the Kafka endpoint that was configured on the previous step.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;For example, this bean will create the ProtoBuf class and then sent to Kafka topics&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.bean(demo.camel.TransactionProtos.Transaction.class, "parseFrom(${body})")&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.toD("kafka:webtrans?key=${header.sender}")&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;For example, the method will create the Avro class and then sent to Kafka topics&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.&lt;/span&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;setBody(method(this,"setAvroValue( ${originalmsg.userid},${originalmsg.amt})"))&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="color: #0b5394; font-family: &amp;quot;Droid Sans Mono&amp;quot;, monospace; font-size: 9pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;.toD("kafka:transrec?serializerClass={{serializerClass}}"+registryconfigAvro)&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;You can find a working github example, in the link.That’s all for this post.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;In my next post, I will walk you through the details of the example.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; font-weight: 700; vertical-align: baseline; white-space: pre-wrap;"&gt;Summary&lt;/span&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Here is a video that explain everything with diagrams (NO CODE)&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="BLOG_video_class" height="266" src="https://www.youtube.com/embed/MljKMXxpAxQ" width="320" youtube-src-id="MljKMXxpAxQ"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;p dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;Red Hat Display&amp;quot;, sans-serif; font-size: 11pt; font-variant-east-asian: normal; font-variant-ligatures: normal; font-variant-position: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Apricurio Registry is a datastore to help topic owners to&amp;nbsp; manage the schema of it’s dat format.&amp;nbsp; (API for Rest endpoints). When trying to publish/subscribe to the topic, developers will have access to the already defined schema contract. And using Apache Camel, to implement the actual integration code with simple configuration or built-in data format components.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;br class="Apple-interchange-newline" /&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hFXzh/~4/GHSzjYRAfK0" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gKpQrEcNzS8" height="1" width="1" alt=""/&gt;</content><summary>Introduction:  Contract first application development is not limited to synchronized RESTFul API calls. With the adoption of event driven architecture, more developers are demanding a way to set up contracts between these asynchronous event publishers and consumers.. Sharing what data format that each subscriber is consuming, what data format is used from the event publisher, in a way OpenAPI stan...</summary><dc:creator>CHRISTINA の J老闆</dc:creator><dc:date>2020-11-09T15:53:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/blogspot/hFXzh/~3/GHSzjYRAfK0/contract-first-development-event-driven.html</feedburner:origLink></entry><entry><title>OpenID Connect integration with Red Hat 3scale API Management and Okta</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/W_PKOrEgUQY/" /><category term="3scale" scheme="searchisko:content:tags" /><category term="api gateway" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="OIDC integration" scheme="searchisko:content:tags" /><category term="Okta" scheme="searchisko:content:tags" /><category term="openid connect" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Juliano Mohr</name></author><id>searchisko:content:id:jbossorg_blog-openid_connect_integration_with_red_hat_3scale_api_management_and_okta</id><updated>2020-11-09T08:00:52Z</updated><published>2020-11-09T08:00:52Z</published><content type="html">&lt;p&gt;This article introduces you to using &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; for &lt;a target="_blank" rel="nofollow" href="https://openid.net/connect/"&gt;OpenID Connect (OIDC)&lt;/a&gt; integration and compliance. Our goal is to secure an API in 3scale API Management using &lt;a target="_blank" rel="nofollow" href="https://jwt.io"&gt;JSON Web Token&lt;/a&gt; (JWT), OIDC, and the &lt;a target="_blank" rel="nofollow" href="https://tools.ietf.org/html/rfc6749"&gt;Oauth2 Authorization Framework&lt;/a&gt;. We will set up the integration using &lt;a target="_blank" rel="nofollow" href="https://www.okta.com/"&gt;Okta&lt;/a&gt; as our &lt;a href="https://developers.redhat.com/blog/2018/10/09/3scale-3rd-party-idp-oidc/"&gt;third-party OpenID Connect identity provider&lt;/a&gt;. An important part of the demonstration is establishing the 3scale API Management gateway&amp;#8217;s connection with Okta.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article is not a deep dive into OIDC or Oauth2. I won&amp;#8217;t cover the details of authentication and authorization flows. Toward the end of the article, you will see how to obtain an access token, which you will need to execute a request against a protected API.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;For demonstration purposes, we will use 3scale API Management and Okta as self-managed services. If you don&amp;#8217;t have them already, begin by creating free service accounts using &lt;a target="_blank" rel="nofollow" href="https://www.3scale.net/"&gt;3scale.net&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://www.okta.com/"&gt;okta.com&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Setting up the 3scale API Management OIDC integration&lt;/h2&gt; &lt;p&gt;Our first step is to create the simplest possible REST API for integration. We&amp;#8217;ll use the 3scale API Management platform and an API back end configured to the &lt;code&gt;echo-api&lt;/code&gt;: &lt;a target="_blank" rel="nofollow" href="https://echo-api.3scale.net:443"&gt;https://echo-api.3scale.net:443&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As an alternative to this setup, you could try a different back end or a self-managed &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.3/html/deployment_options/apicast-overview"&gt;APIcast instance&lt;/a&gt;. This article showcases OIDC authentication. You can adapt different settings to the use case.&lt;/p&gt; &lt;p&gt;Figure 1 shows the OIDC settings in 3scale API Management.&lt;/p&gt; &lt;div style="width: 643px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-authentication-oidc-settings-1024x693.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-authentication-oidc-settings-1024x693.png" alt="The dialog screen to enter the 3scale API Management OIDC settings for Okta authentication." width="633" height="428" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 1: Enter the 3scale API Management OIDC settings for Okta authentication.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Note that the settings include AUTHENTICATION, AUTHENTICATION SETTINGS, and OPENID CONNECT (OIDC) BASICS. The OpenID Connect issuer URL is set to an Okta custom authorization server named &amp;#8220;default.&amp;#8221; It is impossible to customize an &lt;a target="_blank" rel="nofollow" href="https://developer.okta.com/docs/concepts/auth-servers/"&gt;Okta default authorization server&lt;/a&gt;, so we will use the custom server for this example.&lt;/p&gt; &lt;h2&gt;Overview of the 3scale API Management Okta integration&lt;/h2&gt; &lt;p&gt;So far, we have employed OpenID Connect&amp;#8217;s &lt;code&gt;.well-known/openid-configuration&lt;/code&gt; endpoint to connect 3scale API Management with Okta. The 3scale API Management gateway determines what it needs from the OpenID Connect issuer URL, which we&amp;#8217;ve just defined. Before going further, let&amp;#8217;s clarify what we want to accomplish. The diagram in Figure 2 illustrates the step-by-step process for integrating 3scale API Management and Okta.&lt;/p&gt; &lt;div style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-oidc-okta-1024x575.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-oidc-okta-1024x575.png" alt="A diagram of the 3scale API Management and Okta integration." width="640" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 2: An overview of the 3scale API Management and Okta integration.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Our goal is to call a protected API resource from 3scale API Management and use Okta for the user-delegated access.  &lt;b&gt;Step 1&lt;/b&gt; assumes that we&amp;#8217;ve retrieved a JSON web token from the Okta authorization server, as defined in the &lt;a target="_blank" rel="nofollow" href="https://openid.net/specs/openid-connect-core-1_0.html#Authentication"&gt;OIDC specification&lt;/a&gt;. We will experiment with the OIDC authorization flow later.&lt;/p&gt; &lt;p&gt;After calling the API in &lt;b&gt;Step 2&lt;/b&gt;, 3scale API Management verifies the JSON web token in &lt;b&gt;Step 3&lt;/b&gt;. If the token is valid, 3scale API Management dispatches the request to the server back end, which you can see in &lt;b&gt;Step 4&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;Verifying the client application ID is paramount for the request to be successful. In the next sections, we will look closely at the mechanics of verification.&lt;/p&gt; &lt;h2&gt;Verify and match the JWT claim&lt;/h2&gt; &lt;p&gt;The 3scale API Management gateway secures every request by checking its associated JSON web token for the following characteristics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt;: Is the JWT being tampered with by a malicious user (signature check)?&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Expiration&lt;/strong&gt;: Is this token expired?&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Issuer&lt;/strong&gt;: Has it been issued by an authorization server that is known to the 3scale API Management gateway?&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Client ID&lt;/strong&gt;: Does the token contain a claim matching a client application ID that is known to the 3scale API Management gateway?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The next step is to match the 3scale API Management client with the correct JWT claim.&lt;/p&gt; &lt;p&gt;In the 3scale API Management settings, set the &lt;b&gt;ClientID Token Claim&lt;/b&gt; field to &lt;b&gt;appid&lt;/b&gt;, as shown in Figure 3.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-clientid-token-claim-1024x324.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-clientid-token-claim-1024x324.png" alt="The dialog to set the ClientID Token Claim." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 3: Set the ClientID Token Claim to &lt;code&gt;appid&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This configuration tells 3scale API Management which claim to match against a client application in its API. For this demonstration, I decided to use &lt;code&gt;appid&lt;/code&gt; rather than the default &lt;code&gt;azp&lt;/code&gt; claim. The Okta authorization server requires a custom claim. I also wanted to avoid the often &lt;a target="_blank" rel="nofollow" href="https://bitbucket.org/openid/connect/issues/973"&gt;misunderstood and misused azp claim&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Configuring Okta&lt;/h2&gt; &lt;p&gt;Next, let&amp;#8217;s head over to the Okta admin portal to configure the Okta authorization server and OpenID Connect application. This configuration allows a client application to request a JSON web token on behalf of a user. Recall that we’re using a custom authorization server (named default) to add the &lt;code&gt;appid&lt;/code&gt; JWT claim. The value assigned to this claim will be the Okta client application ID.&lt;/p&gt; &lt;h3&gt;Configure the Okta authorization server&lt;/h3&gt; &lt;p&gt;As shown in Figure 4, we use the &lt;b&gt;Authorization Servers&lt;/b&gt; dialog to add a new claim to the default authorization server.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-auth-server-appid-claim-1024x589.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-auth-server-appid-claim-1024x589.png" alt="The Authorization Servers dialog in Okta admin includes the option to add the appid claim to Okta's default authorization server." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 4: Add the appid claim to the default authorization server.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In OpenID Connect, two tokens are usually issued in response to the authorization code flow: The ID token and the access token. We will use the access token to access the protected resource from 3scale API Management, so we only need to add the custom claim to that token type.&lt;/p&gt; &lt;h3&gt;Create the OIDC application&lt;/h3&gt; &lt;p&gt;While in the Okta admin portal, we&amp;#8217;ll use the OpenID Connect sign-on method to create a new application. Figure 5 shows the dialog to create a new application integration.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-preview-768x437.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-preview-768x437.png" alt="The dialog to create a new application in the Okta admin portal. The OpenID Connect sign-on method is selected." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 5: Select the option to create an OpenID Connect application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, we use the &lt;b&gt;Create OpenID Connect Integration&lt;/b&gt; dialog to create the application, as shown in Figure 6.  Note that we&amp;#8217;ll use the login redirect URI to retrieve the token later as part of the authorization flow.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-768x729.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-768x729.png" alt="Use the 'Create OpenID Connect Integration' dialog to create the Okta app." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 6: Create the OpenID Connect application for Okta.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After creating the OIDC application, locate the Okta-generated client ID on the &lt;b&gt;Client Credentials&lt;/b&gt; page, shown in Figure 7. Save this value to use when we create the corresponding client application in 3scale API Management.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-details-768x348.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-oidc-create-application-details-768x348.png" alt="The Client ID generated by Okta is located on the Client Credentials page." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 7: Locate the client ID on the Okta admin Client Credentials page.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create and assign a user to the OIDC application&lt;/h3&gt; &lt;p&gt;The last thing we&amp;#8217;ll do in Okta is to create and assign at least one user to the application, as shown in Figure 8. This allows a valid login to execute using the OpenID Connect authorization flow.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-app-assign-user-768x367.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-app-assign-user-768x367.png" alt="In the Okta admin console, create and assign at least one user to the application." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 8: Create and assign at least one user to the OpenID Connect application in Okta.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This completes the Okta configuration. Next, we will configure a corresponding application in 3scale API Management.&lt;/p&gt; &lt;h2&gt;Configuring the 3scale API Management client application&lt;/h2&gt; &lt;p&gt;The API gateway can only authorize API calls from a previously registered client application. So, our last step is to create a 3scale API Management application whose credentials match with the application we&amp;#8217;ve just created in Okta. We only need to match the &lt;code&gt;application_id&lt;/code&gt; (also called the client ID), because it is carried by the JWT &lt;code&gt;appid&lt;/code&gt; claim.&lt;/p&gt; &lt;p&gt;As an admin user, navigate to the 3scale API Management docs. You must use &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/3scale"&gt;3scale API Management&lt;/a&gt; to create the client application and specify a user-defined &lt;code&gt;application_id&lt;/code&gt;. Figure 9 shows the dialog to create the 3scale API Management client application.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-create-application-via-api-1024x630.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/3scale-create-application-via-api-1024x630.png" alt="Create the client application using the 3scale API Management gateway API." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 9: Use the 3scale API Management gateway API to create a client application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once you have it set up with the correct parameters, you will see the new application in the listing that subscribes to the API product you are testing.&lt;/p&gt; &lt;h2&gt;Testing the application&lt;/h2&gt; &lt;p&gt;Now, you might wonder how to ensure that the 3scale API Management application performs correctly. In this case, we can use Postman to execute a request with a valid JWT access token from Okta. The screenshot in Figure 10 shows how to execute the authorization flow in Postman.&lt;/p&gt; &lt;div style="width: 583px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/postman-authorization-get-token-768x784.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/postman-authorization-get-token-768x784.png" alt="Using Postman to get a JWT access token from Okta." width="573" height="310" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 10: Using Postman to get a JWT access token from Okta.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;A login screen should pop up, followed by the successful retrieval of the ID and access tokens. Then, we can successfully retrieve the client ID and access tokens shown in Figure 11. (Note that the access token is represented using &lt;a target="_blank" rel="nofollow" href="https://jwt.io"&gt;jwt.io&lt;/a&gt;.)&lt;/p&gt; &lt;div style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-access-token-example-1024x580.png"&gt;&lt;img src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/okta-access-token-example-1024x580.png" alt="Represents the JWT access token from Okta using jwt.io" width="640" height="363" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Figure 11: Retrieve the client ID and access tokens from Okta.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;From here, we call the API endpoint with the JWT access token assigned to the &lt;code&gt;Authorization: Bearer&lt;/code&gt; HTTP request header:&lt;/p&gt; &lt;pre&gt;$ curl "https://some-example-api.xyz.gw.apicast.io" -H "Authorization: Bearer jwt-access-token-base64"&lt;/pre&gt; &lt;p&gt;Postman can take care of the rest. The &lt;code&gt;echo-api&lt;/code&gt; will respond when the authentication is successful.&lt;/p&gt; &lt;h2&gt;Using Red Hat&amp;#8217;s single sign-on technology for OIDC integration&lt;/h2&gt; &lt;p&gt;For this demonstration, we had to create an OpenID Connect application in both Okta and 3scale API Management. The number of applications grows as you start to delegate the process of application creation to other developers. The one OIDC specification that addresses this problem is the &lt;a target="_blank" rel="nofollow" href="https://openid.net/specs/openid-connect-registration-1_0.html"&gt;Dynamic Client Registration specification&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;At the time of this writing, 3scale API Management and Okta don&amp;#8217;t automatically integrate. However, Red Hat&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/articles/2342881"&gt;single sign-on technology&lt;/a&gt; is an open-source OpenID provider that integrates seamlessly with 3scale API Management. You can use the 3scale API Management gateway and the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.7/html/creating_the_developer_portal/authentication"&gt;single sign-on developer portal&lt;/a&gt; to drive the authorization flow. Find out more about &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on"&gt;Red Hat single sign-on tools (7.4)&lt;/a&gt; and its upstream community project &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thank you for taking the time to read this article and follow the demonstration. As you have seen, 3scale API Management works together with any OpenID provider in a way that is compliant with its specification. We&amp;#8217;ve used Okta as our OpenID provider for this demonstration. I hope that breaking down the verification process and showing each party&amp;#8217;s roles and responsibilities helped to demystify aspects of application security with JWT, OIDC, and Oauth2.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#38;linkname=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F09%2Fopenid-connect-integration-with-red-hat-3scale-api-management-and-okta%2F&amp;#038;title=OpenID%20Connect%20integration%20with%20Red%20Hat%203scale%20API%20Management%20and%20Okta" data-a2a-url="https://developers.redhat.com/blog/2020/11/09/openid-connect-integration-with-red-hat-3scale-api-management-and-okta/" data-a2a-title="OpenID Connect integration with Red Hat 3scale API Management and Okta"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/09/openid-connect-integration-with-red-hat-3scale-api-management-and-okta/"&gt;OpenID Connect integration with Red Hat 3scale API Management and Okta&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/W_PKOrEgUQY" height="1" width="1" alt=""/&gt;</content><summary>This article introduces you to using Red Hat 3scale API Management for OpenID Connect (OIDC) integration and compliance. Our goal is to secure an API in 3scale API Management using JSON Web Token (JWT), OIDC, and the Oauth2 Authorization Framework. We will set up the integration using Okta as our third-party OpenID Connect identity provider. An important part of the demonstration is establishing t...</summary><dc:creator>Juliano Mohr</dc:creator><dc:date>2020-11-09T08:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/09/openid-connect-integration-with-red-hat-3scale-api-management-and-okta/</feedburner:origLink></entry><entry><title>WildFly server configuration with Ansible collection for JCliff, Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Os8Ca_96X5Y/" /><category term="ansible" scheme="searchisko:content:tags" /><category term="Ansible collections" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jcliff" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-wildfly_server_configuration_with_ansible_collection_for_jcliff_part_1</id><updated>2020-11-06T08:00:12Z</updated><published>2020-11-06T08:00:12Z</published><content type="html">&lt;p&gt;This three-part series guides you through using Ansible to fine-tune a WildFly or &lt;a href="https://developers.redhat.com/products/eap/download"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP) server configuration. We will use the most recently released version of the &lt;a href="https://github.com/wildfly-extras/ansible_collections_jcliff/releases/tag/v0.0.2"&gt;Ansible collection for JCliff&lt;/a&gt; to extend Ansible&amp;#8217;s capabilities. The JCliff collection supports configuring several of the application server subsystems directly from Ansible.&lt;/p&gt; &lt;p&gt;In Part 1, we will mostly focus on the groundwork and discuss all the steps required to be able to use JCliff within Ansible. Once properly installed, we&amp;#8217;ll use JCliff to configure WildFly&amp;#8217;s &lt;code&gt;system_props&lt;/code&gt; subsystem, which lets us declare system variables in the WildI guesFly server configuration. Once we have that foundation in place, we&amp;#8217;ll begin exploring more interesting configurations in Part 2 and Part 3.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the Ansible documentation for more about &lt;a target="_blank" rel="nofollow" href="https://docs.ansible.com/ansible/latest/user_guide/collections_using.html"&gt;Ansible collections&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-770187"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Using Ansible to fine-tune a WildFly server configuration&lt;/h2&gt; &lt;p&gt;Before we start setting up the Ansible playbook, let’s discuss what we want to achieve. Our use case is finetuning a WildFly server configuration, which means going beyond what Ansible&amp;#8217;s primitives can do for this software.&lt;/p&gt; &lt;p&gt;It is easy to automate a WildFly installation using Ansible&amp;#8217;s built-in modules. You can use a package manager to install any necessary dependencies, create the required directory structure, set up the configuration files, and so on. However, you can&amp;#8217;t as easily fine-tune the WildFly server&amp;#8217;s configuration. The usual strategy of providing an Ansible template file for the server’s configuration is not suitable. Many server configurations live in the main configuration file (&lt;code&gt;standalone.xml&lt;/code&gt; or &lt;code&gt;standalone-full.xml&lt;/code&gt;). The server frequently accesses this file at runtime, altering the file contents at the same time. As a result, the main configuration file is not a good target for &lt;a target="_blank" rel="nofollow" href="https://docs.ansible.com/ansible/latest/modules/template_module.html"&gt;templating&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Our goal is to provide a fine-tuned configuration to the WildFly server. Within the Ansible playbook, we want a way to define the server&amp;#8217;s required state. We also want to ensure that Ansible can monitor this state and spot any alterations to it. This is where the &lt;a target="_blank" rel="nofollow" href="https://github.com/bserdar/jcliff"&gt;JCliff&lt;/a&gt; Ansible collection comes in.&lt;/p&gt; &lt;h2&gt;What is Ansible collection for JCliff?&lt;/h2&gt; &lt;p&gt;JCliff is a command-line interface (CLI) that lets us dynamically change a WildFly server&amp;#8217;s state. JCliff uses WildFly&amp;#8217;s JBoss CLI to update the server configuration at runtime. This tool is provided with the application server. Once the server has processed requests sent using the JBoss CLI tool, it ensures that the changes are recorded and updates the main configuration file, &lt;code&gt;standalone.xml&lt;/code&gt;, accordingly.&lt;/p&gt; &lt;p&gt;The new &lt;a target="_blank" rel="nofollow" href="https://galaxy.ansible.com/wildfly/jcliff"&gt;Ansible collection for JCliff&lt;/a&gt; (&lt;code&gt;wildfly.jcliff&lt;/code&gt;) provides integration in the form of an Ansible module. Ansible uses the JCliff integration to verify that the WildFly server configuration is in the proper state. It also uses JCliff to update the server configuration if there are any discrepancies. JCliff builds the JBoss CLI queries that are required for these purposes. JCliff also helps Ansible remain &lt;em&gt;idempotent&lt;/em&gt;, meaning that changes will only be applied if the configuration is &lt;em&gt;not&lt;/em&gt; in the proper state.&lt;/p&gt; &lt;p&gt;JCliff lets us express our requirements directly inside of the Ansible playbook. For this, we will use the &lt;code&gt;jcliff:&lt;/code&gt; module, which is provided with the &lt;code&gt;wildfly.jcliff&lt;/code&gt; collection.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you want to know more about JCliff, see the article &lt;a href="https://developers.redhat.com/blog/2019/11/06/managing-jboss-eap-wildfly-using-jcliff/"&gt;&lt;i&gt;Managing JBoss EAP/WildFly using JCliff&lt;/i&gt;&lt;/a&gt;. This series builds on that article by showing you how to use JCliff&amp;#8217;s new Ansible collection format for packaging extensions within Ansible. Many thanks to my co-author for the original article, &lt;a href="https://developers.redhat.com/blog/author/ablock/"&gt;Andrew Block,&lt;/a&gt; for reviewing this series.&lt;/p&gt; &lt;h2&gt;Prerequisites for the demonstration&lt;/h2&gt; &lt;p&gt;Before diving into the demonstration, let&amp;#8217;s make sure that we have all of the prerequisites in place:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL), CentOS, or Fedora operating system.&lt;/li&gt; &lt;li&gt;A &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; virtual machine for JDK 8 or higher.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-rhel-centos-or-fedora"&gt;Ansible&lt;/a&gt; (we recommend Ansible 2.9, but an older or more recent version should work).&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.wildfly.org/downloads/"&gt;WildFly 19&lt;/a&gt; or higher, which should be installed and running on the system.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: Ansible collection for JCliff includes a role to automate installing JCliff. Full support is currently available only for Linux and macOS, but work is emerging to support Windows.&lt;/p&gt; &lt;h2&gt;The Ansible playbook&lt;/h2&gt; &lt;p&gt;For our demonstration, we will start with a minimal, functional Ansible playbook. To keep the demonstration simple and easy to reproduce, we are running Ansible on a local system.&lt;/p&gt; &lt;pre&gt;--- - hosts: localhost   gather_facts: true   vars:   tasks: &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s verify that Ansible is properly installed on the control node and that the playbook completes successfully:&lt;/p&gt; &lt;pre&gt;$ ansible-playbook playbook.yml [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all' PLAY [localhost] *********************************************************************************************************************** TASK [Gathering Facts] ***************************************************************************************************************** ok: [localhost] PLAY RECAP ***************************************************************************************************************************** localhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 &lt;/pre&gt; &lt;p&gt;So far, everything works. Note that we set the &lt;code&gt;gather_facts&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;. This setting allows Ansible to gather information about the system. Soon, Ansible will use this information to install JCliff.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: While gathering facts is not a hard requirement for the JCliff Ansible collection, you might have to provide the additional variables yourself if you choose to disable this setting.&lt;/p&gt; &lt;h2&gt;Installing Ansible collection for JCliff&lt;/h2&gt; &lt;p&gt;We are ready to install the Ansible collection for JCliff. First, we&amp;#8217;ll use the &lt;code&gt;ansible-galaxy&lt;/code&gt; tool (which is included with Ansible by default) to install the &lt;code&gt;wildfly.jcliff&lt;/code&gt; module:&lt;/p&gt; &lt;pre&gt;# ansible-galaxy collection install wildfly.jcliff Process install dependency map Starting collection install process Installing 'wildfly.jcliff:0.0.2' to '/root/.ansible/collections/ansible_collections/wildfly/jcliff' &lt;/pre&gt; &lt;h3&gt;Locate the &lt;code&gt;JBOSS_HOME&lt;/code&gt; variable&lt;/h3&gt; &lt;p&gt;As I previously mentioned, the JCliff Ansible collection comes with a role that automatically installs JCliff. All we have to do is add the required instructions to our Ansible playbook. In particular, JCliff needs the &lt;code&gt;JBOSS_HOME&lt;/code&gt; environment variable to locate the WildFly server on a target system. Let&amp;#8217;s retrieve the server location from this environment variable before going further:&lt;/p&gt; &lt;pre&gt;--- - hosts: localhost   gather_facts: true   vars:     jboss_home: "{{ lookup('env','JBOSS_HOME') }}"   collections:     - wildfly.jcliff   roles:     - jcliff   tasks: &lt;/pre&gt; &lt;p&gt;Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The variable &lt;code&gt;jboss_home&lt;/code&gt; is defined with the value of the environment variable called &lt;code&gt;JBOSS_HOME&lt;/code&gt; which ensure that there is no discrepancy between them.&lt;/li&gt; &lt;li&gt;This playbook requires the &lt;code&gt;wildfly.jcliff&lt;/code&gt; collection, which we&amp;#8217;ve just installed locally.&lt;/li&gt; &lt;li&gt;The Ansible playbook imports the &lt;code&gt;jcliff&lt;/code&gt; role from the &lt;code&gt;wildfly.jcliff&lt;/code&gt; collection. This role takes care of installing JCliff itself on the system.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Next, we&amp;#8217;ll run the Ansible playbook with the instructions and information required to install JCliff.&lt;/p&gt; &lt;h3&gt;Run the playbook to install the JCliff CLI&lt;/h3&gt; &lt;p&gt;Running the Ansible playbook imports the &lt;code&gt;jcliff&lt;/code&gt; role and performs the following tasks to install the JCliff CLI:&lt;/p&gt; &lt;pre&gt;# ansible-playbook playbook.yml [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all' PLAY [localhost] *********************************************************************************************************************** TASK [Gathering Facts] ***************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Collect Supported Operating Systems] ********************************************************************* ok: [localhost] =&amp;#62; (item={u'key': u'homebrew', u'value': [u'MacOSX']}) ok: [localhost] =&amp;#62; (item={u'key': u'rpm', u'value': [u'Fedora', u'CentOS', u'RedHat']}) TASK [wildfly.jcliff.jcliff : Verify supported Operating Systems] ********************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using HomeBrew] *************************************************************************** skipping: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using RPM] ******************************************************************************** included: /root/.ansible/collections/ansible_collections/wildfly/jcliff/roles/jcliff/tasks/install_rpm.yml for localhost TASK [wildfly.jcliff.jcliff : Add JCliff Yum Repository (RedHat)] ********************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Test if package jcliff is already installed] ************************************************************* fatal: [localhost]: FAILED! =&amp;#62; {"changed": false, "cmd": ["rpm", "-q", "jcliff"], "delta": "0:00:00.489702", "end": "2020-08-17 08:54:34.190992", "msg": "non-zero return code", "rc": 1, "start": "2020-08-17 08:54:33.701290", "stderr": "", "stderr_lines": [], "stdout": "package jcliff is not installed", "stdout_lines": ["package jcliff is not installed"]} TASK [wildfly.jcliff.jcliff : Ensure JCliff is installed] ****************************************************************************** changed: [localhost] TASK [wildfly.jcliff.jcliff : Install Jcliff using standalone binary] ****************************************************************** skipping: [localhost] PLAY RECAP ***************************************************************************************************************************** localhost                  : ok=6    changed=1    unreachable=0    failed=0    skipped=2    rescued=1    ignored=0 &lt;/pre&gt; &lt;p&gt;The playbook ran the &lt;code&gt;jcliff&lt;/code&gt; role. The new role noticed that JCliff was not installed on the system and installed the necessary software.&lt;/p&gt; &lt;h3&gt;Verify the JCliff installation&lt;/h3&gt; &lt;p&gt;Now, let&amp;#8217;s verify that JCliff is installed:&lt;/p&gt; &lt;pre&gt;# jcliff --version No JBOSS_HOME provided, aborting... &lt;/pre&gt; &lt;p&gt;JCliff is installed, but (as I previously noted), it needs us to define the &lt;code&gt;JBOSS_HOME&lt;/code&gt; variable to be functional:&lt;/p&gt; &lt;pre&gt;$ export JBOSS_HOME=/path/to/wildfly/home&lt;/pre&gt; &lt;p&gt;After we&amp;#8217;ve exported the environment variable, try re-running the command:&lt;/p&gt; &lt;pre&gt;# jcliff Jcliff version 2.12.5 Usage:     jcliff [options] file(s) where the options are:   --cli=Path : jboss-cli.sh. Defaults to                /usr/share/jbossas/bin/jboss-cli.sh   --controller=host       : EAP6 host. Defaults to localhost.   --user=username         : EAP6 admin user name   --password=pwd          : EAP6 admin password   --ruledir=Path          : Location of jcliff rules.   --noop                  : Read-only mode   --json                  : Use json to parse input files   -v                      : Verbose output   --timeout=timeout       : Command timeout in milliseconds   --output=Path           : Log output file   --reload                : Reload after each subsystem configuration if required   --waitport=waitport     : Wait this many seconds for the port to be opened   --nobatch               : Don't use batch mode of jboss-cli   --redeploy              : Redeploy all apps   --reconnect-delay=delay : Wait this many milliseconds after a :reload for the server to restart   --leavetmp              : Don't erase temp files   --pre=str               : Prepend str to all commands (can be used for domain mode support) &lt;/pre&gt; &lt;p&gt;JCliff is now installed and fully operational.&lt;/p&gt; &lt;h3&gt;Verify idempotency&lt;/h3&gt; &lt;p&gt;There is one last thing to do before the setup is complete. We must ensure that our Ansible playbooks are idempotent. In this context, that means the tasks described in a playbook won’t be performed again if the system is already in the appropriate state. To check this, run the playbook again and verify that no more changes are being applied:&lt;/p&gt; &lt;pre&gt;# ansible-playbook  playbook.yml PLAY [localhost] ***************************************************************************************************************************************************************************** TASK [Gathering Facts] *********************************************************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Collect Supported Operating Systems] *************************************************************************************************************************** ok: [localhost] =&amp;#62; (item={u'key': u'homebrew', u'value': [u'MacOSX']}) ok: [localhost] =&amp;#62; (item={u'key': u'rpm', u'value': [u'Fedora', u'CentOS', u'RedHat']}) TASK [wildfly.jcliff.jcliff : Verify supported Operating Systems] **************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using HomeBrew] ********************************************************************************************************************************* skipping: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using RPM] ************************************************************************************************************************************** included: /root/.ansible/collections/ansible_collections/wildfly/jcliff/roles/jcliff/tasks/install_rpm.yml for localhost TASK [wildfly.jcliff.jcliff : Add JCliff Yum Repository (RedHat)] **************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Test if package jcliff is already installed] ******************************************************************************************************************* ok: [localhost] TASK [wildfly.jcliff.jcliff : Install Jcliff using standalone binary] ************************************************************************************************************************ skipping: [localhost] PLAY RECAP *********************************************************************************************************************************************************************************** localhost                  : ok=6    changed=0    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0 &lt;/pre&gt; &lt;p&gt;We have completed the setup to integrate our Ansible playbook with JCliff. Now, we are ready to start using the &lt;code&gt;jcliff:&lt;/code&gt; module to fine-tune our WildFly server configuration.&lt;/p&gt; &lt;h2&gt;Define system variables in the WildFly server configuration&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ll start by using JCliff to add system variables to WildFly&amp;#8217;s server configuration. It’s not the most complex functionality, but it&amp;#8217;s a good way to confirm that everything is working:&lt;/p&gt; &lt;pre&gt;--- - hosts: localhost   gather_facts: true   vars:     jboss_home: "{{ lookup('env','JBOSS_HOME') }}"   collections:     - wildfly.jcliff   roles:     - jcliff   tasks: &lt;/pre&gt; &lt;p&gt;The configuration so far is straightforward. The JCliff CLI only requires the path to the WildFly server&amp;#8217;s home directory, which we defined in the &lt;code&gt;jboss_home&lt;/code&gt; variable. After locating the home variable, JCliff uses the script provided with WildFly (&lt;code&gt;${JBOSS_HOME}/bin/jboss-cli.sh&lt;/code&gt;) to communicate with the WildFly server.&lt;/p&gt; &lt;p&gt;Now, we want to begin our custom configuration. Most WildFly configurations are defined as subsystems, and JCliff has a list of these subsystems. We will start with something simple: The &lt;code&gt;system_props&lt;/code&gt; subsystem, which we&amp;#8217;ll use to declare system variables in the WildFly server configuration:&lt;/p&gt; &lt;pre&gt;    - jcliff:         wfly_home: "{{ jboss_home }}"         subsystems:           - system_props:               - name: jcliff.enabled                 value: 'enabled.plus' &lt;/pre&gt; &lt;p&gt;Re-run the Ansible playbook and see what happens:&lt;/p&gt; &lt;pre&gt;# ansible-playbook playbook.yml PLAY [localhost] ***************************************************************************************************************************************************************************** TASK [Gathering Facts] *********************************************************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Collect Supported Operating Systems] *************************************************************************************************************************** ok: [localhost] =&amp;#62; (item={u'key': u'homebrew', u'value': [u'MacOSX']}) ok: [localhost] =&amp;#62; (item={u'key': u'rpm', u'value': [u'Fedora', u'CentOS', u'RedHat']}) TASK [wildfly.jcliff.jcliff : Verify supported Operating Systems] **************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using HomeBrew] ********************************************************************************************************************************* skipping: [localhost] TASK [wildfly.jcliff.jcliff : Install JCliff using RPM] ************************************************************************************************************************************** included: /root/.ansible/collections/ansible_collections/wildfly/jcliff/roles/jcliff/tasks/install_rpm.yml for localhost TASK [wildfly.jcliff.jcliff : Add JCliff Yum Repository (RedHat)] **************************************************************************************************************************** ok: [localhost] TASK [wildfly.jcliff.jcliff : Test if package jcliff is already installed] ******************************************************************************************************************* ok: [localhost] TASK [wildfly.jcliff.jcliff : Install Jcliff using standalone binary] ************************************************************************************************************************ skipping: [localhost] TASK [jcliff] ******************************************************************************************************************************************************************************** changed: [localhost] PLAY RECAP *********************************************************************************************************************************************************************************** localhost                  : ok=7    changed=1    unreachable=0    failed=0    skipped=2    rescued=0    ignored=0 &lt;/pre&gt; &lt;p&gt;Everything seems to be running smoothly. Ansible noticed that the variables we defined were missing from the server’s initial configuration and added them. All of this happened thanks to JCliff communicating with the server (via the JBoss CLI).&lt;/p&gt; &lt;p&gt;To confirm that the variables are defined in the WildFly configuration, run the following JBoss CLI query:&lt;/p&gt; &lt;pre&gt;# ${JBOSS_HOME}/bin/jboss-cli.sh --connect --command='/system-property=jcliff.enabled:read-resource' {     "outcome" =&amp;#62; "success",     "result" =&amp;#62; {"value" =&amp;#62; "enabled.plus"} } &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s be thorough and verify one of the promises of JCliff. We said earlier that the WildFly server&amp;#8217;s XML configuration would be automatically updated. Here is the confirmation that it has been:&lt;/p&gt; &lt;pre&gt;...  &amp;#60;/extensions&amp;#62;     &amp;#60;system-properties&amp;#62;         &amp;#60;property name="jcliff.enabled" value="enabled.plus"/&amp;#62;     &amp;#60;/system-properties&amp;#62;     &amp;#60;management&amp;#62; ... &lt;/pre&gt; &lt;p&gt;Everything is working as expected. JCliff can communicate with the WildFly server, and it can update the server configuration.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve completed the basic setup. In Part 2, we will go deeper into the features offered by the Ansible collection for JCliff. We&amp;#8217;ll cover how to deploy new JDBC drivers along with defining new data sources. We will also deploy applications inside the application server.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#38;linkname=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fwildfly-server-configuration-with-ansible-collection-for-jcliff-part-1%2F&amp;#038;title=WildFly%20server%20configuration%20with%20Ansible%20collection%20for%20JCliff%2C%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2020/11/06/wildfly-server-configuration-with-ansible-collection-for-jcliff-part-1/" data-a2a-title="WildFly server configuration with Ansible collection for JCliff, Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/06/wildfly-server-configuration-with-ansible-collection-for-jcliff-part-1/"&gt;WildFly server configuration with Ansible collection for JCliff, Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Os8Ca_96X5Y" height="1" width="1" alt=""/&gt;</content><summary>This three-part series guides you through using Ansible to fine-tune a WildFly or Red Hat JBoss Enterprise Application Platform (JBoss EAP) server configuration. We will use the most recently released version of the Ansible collection for JCliff to extend Ansible’s capabilities. The JCliff collection supports configuring several of the application server subsystems directly from Ansible. In Part 1...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2020-11-06T08:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/06/wildfly-server-configuration-with-ansible-collection-for-jcliff-part-1/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux 8.3 supports faster service and workload delivery</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RckwAAa4-8s/" /><category term="application streams" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="node.js 14" scheme="searchisko:content:tags" /><category term="perl" scheme="searchisko:content:tags" /><category term="php" scheme="searchisko:content:tags" /><category term="Podman" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="rhel 8.3" scheme="searchisko:content:tags" /><category term="Ruby" scheme="searchisko:content:tags" /><author><name>Brian Gollaher</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_enterprise_linux_8_3_supports_faster_service_and_workload_delivery</id><updated>2020-11-06T08:00:07Z</updated><published>2020-11-06T08:00:07Z</published><content type="html">&lt;p&gt;Red Hat Enterprise Linux (RHEL) 8.3 was announced last week and is now generally available. We encourage &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; developers to &lt;a href="https://developers.redhat.com/products/rhel/download"&gt;download this update and give it a try&lt;/a&gt;. We also recommend updating both development and production systems to the new 8.3 release. This article is an overview of the developer highlights of RHEL 8.3, including new application streams for &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; 14, Ruby 2.7, &lt;a href="https://developers.redhat.com/blog/category/php/"&gt;PHP&lt;/a&gt; 7.4, &lt;a href="https://developers.redhat.com/blog/2020/09/24/new-c-features-in-gcc-10/"&gt;GCC Toolset 10&lt;/a&gt;, and more.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s new in RHEL 8.3?&lt;/h2&gt; &lt;p&gt;RHEL 8.3 delivers on RHEL 8&amp;#8217;s promise by providing a secure and consistent foundation for the open hybrid cloud. Feature enhancements in this update help developers deliver services and workloads faster and with less effort—for any application on any footprint at any time.&lt;/p&gt; &lt;p&gt;Here are some of the new RHEL 8.3 features designed to assist developers in getting to the cloud, &lt;a href="https://developers.redhat.com/topics/edge-computing"&gt;the edge&lt;/a&gt;, and beyond:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Application streams&lt;/b&gt; help developers innovate using supported versions of the latest tools without sacrificing the earlier versions required for application maintenance. RHEL 8.3 includes application streams for &lt;a href="https://developers.redhat.com/topics/nodejs"&gt;Node.js&lt;/a&gt; 14, &lt;a href="https://developers.redhat.com/blog/category/ruby/"&gt;Ruby&lt;/a&gt; 2.7, &lt;a href="https://developers.redhat.com/blog/category/php/"&gt;PHP&lt;/a&gt; 7.4, GCC Toolset 10, and more.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Podman Remote API 2.0&lt;/b&gt; makes it easy for organizations to retain code and tooling that previously relied on the Docker container engine in RHEL 7.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Containerized RHEL container tools&lt;/b&gt; increase flexibility by letting developers use Buildah, Skopeo, and &lt;a href="https://developers.redhat.com/blog/2020/09/25/rootless-containers-with-podman-the-basics"&gt;Podman&lt;/a&gt; to build and run standard compliant (Open Container Initiative) container images.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Image Builder push-to-cloud&lt;/b&gt; lets admins build customized machine images and automatically upload them to a cloud provider’s inventory.&lt;/li&gt; &lt;li&gt;&lt;b&gt;In-place upgrades for the cloud&lt;/b&gt; simplify lifecycle management for cloud deployments by supporting in-place upgrades from RHEL 7 to RHEL 8.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;New application streams in RHEL 8.3&lt;/h2&gt; &lt;p&gt;RHEL 8.3 includes the following developer tools updates, which are available as application streams:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;GCC Toolset 10&lt;/b&gt;: A curated collection of compilers, toolchains, debuggers, and other critical development tools. The foundation of &lt;a href="https://developers.redhat.com/blog/2020/11/04/red-hat-software-collections-3-6-now-available-in-beta/"&gt;Red Hat Developer Toolset 10&lt;/a&gt;, GNU Compiler Collection (GCC) 10.2.1 is the newest update of the popular &lt;a href="https://developers.redhat.com/topics/open-source"&gt;open source&lt;/a&gt; compiler collection. GCC Toolset 10 also &lt;a href="https://developers.redhat.com/blog/2020/09/24/new-c-features-in-gcc-10/"&gt;updates debugging and performance tools for C/C++&lt;/a&gt; and Fortran.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Go Toolset, LLVM Toolset, and Rust Toolset&lt;/b&gt;: These popular compilers are available with new features in the latest version update.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Node.js 14&lt;/b&gt;: Introduces an &lt;a href="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/"&gt;upgraded V8 engine&lt;/a&gt;, a new experimental WebAssembly System Interface (WASI), experimental Async Local Storage API, and numerous bug and security fixes.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Nginx 1.18&lt;/b&gt;: This version of the popular web and proxy server provides bug fixes, security fixes, new features, and enhancements over Nginx 1.16. Nginx 1.18 includes enhancements to the HTTP request rate and connection limiting and new proxy protocol variables.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Git 2.27&lt;/b&gt;: Adds numerous features for developers, such as switch and restore commands, configuration variables, and options for configuring SSL for communication with proxies.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Ruby 2.7&lt;/b&gt;: Brings performance improvements, bug and security fixes, and new features, including a compaction garbage collector and multi-line editing in the Interactive Ruby Shell.&lt;/li&gt; &lt;li&gt;&lt;b&gt;PHP 7.4&lt;/b&gt;: Bug fixes and enhancements include the new Foreign Function Interface (FFI), an experimental extension that enables calling native functions, accessing native variables, and creating and accessing data structures defined in C libraries.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Perl 5.30&lt;/b&gt;: Adds new features and deprecates or removes several modules.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All of the new RHEL 8.3 application streams are available as &lt;a target="_blank" rel="nofollow" href="https://connect.redhat.com/explore/red-hat-container-certification"&gt;Red Hat Certified Containers&lt;/a&gt; through the &lt;a target="_blank" rel="nofollow" href="https://catalog.redhat.com/software/containers/explore"&gt;Red Hat Ecosystem Catalog&lt;/a&gt;. Our goal is to make it easy to build and deploy mission-critical applications using the supported application streams for Red Hat Enterprise Linux and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Red Hat OpenShift&lt;/a&gt; environments.&lt;/p&gt; &lt;p&gt;For more information, please read the comprehensive &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/"&gt;RHEL 8.3 release notes&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Start using RHEL 8.3 today&lt;/h2&gt; &lt;p&gt;Red Hat Enterprise Linux 8.3 continues to offer customer choice in terms of the underlying compute architecture, with availability across x86_64, ppc64le, s390x, and aarch64 hardware. If you are a developer with an active subscription, you can access RHEL 8.3 through the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/downloads/content/479/ver=/rhel---8/8.3/x86_64/product-software"&gt;Red Hat Enterprise Linux downloads page&lt;/a&gt;. If you are new to Red Hat Enterprise Linux, you can use the downloads page to register and download &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux for developers&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F11%2F06%2Fred-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%208.3%20supports%20faster%20service%20and%20workload%20delivery" data-a2a-url="https://developers.redhat.com/blog/2020/11/06/red-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery/" data-a2a-title="Red Hat Enterprise Linux 8.3 supports faster service and workload delivery"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/11/06/red-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery/"&gt;Red Hat Enterprise Linux 8.3 supports faster service and workload delivery&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RckwAAa4-8s" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Enterprise Linux (RHEL) 8.3 was announced last week and is now generally available. We encourage Linux developers to download this update and give it a try. We also recommend updating both development and production systems to the new 8.3 release. This article is an overview of the developer highlights of RHEL 8.3, including new application streams for Node.js 14, Ruby 2.7, PHP 7.4, GCC To...</summary><dc:creator>Brian Gollaher</dc:creator><dc:date>2020-11-06T08:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/11/06/red-hat-enterprise-linux-8-3-supports-faster-service-and-workload-delivery/</feedburner:origLink></entry></feed>
